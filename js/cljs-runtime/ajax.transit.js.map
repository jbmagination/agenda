{"version":3,"sources":["ajax/transit.cljc"],"sourcesContent":["(ns ajax.transit\n    (:require [cognitect.transit :as t]\n              [ajax.interceptors :as i]\n              [ajax.protocols :as pr]\n              [ajax.util :as u]\n              #? (:clj [ajax.macros :as m])))\n; Surprisingly, only the clj version needs m/defn-curried\n\n(defn transit-type [{:keys [type]}]\n  (or type #? (:cljs :json :clj :msgpack)))\n\n#? (:cljs (defn transit-write-fn\n            [type opts]\n            (let [writer (or (:writer opts)\n                             (t/writer type opts))]\n              (fn transit-write-params [params]\n                (t/write writer params))))\n    :clj (m/defn-curried transit-write-fn\n           [type opts stream params]\n           (let [writer (t/writer stream type opts)]\n             (t/write writer params))))\n\n(defn transit-request-format\n  \"Returns a Transit request format.\n\n   Options include:\n   :writer Explicit Transit writer. If not supplied one will be created using the other options.\n           The default type is :json for ClojureScript and :msgpack for Clojure.\n   :type Override the default transit type with value :json, :json-verbose or :msgpack\n   :handlers Custom Transit handlers (refer to Transit documentation)\"\n  ([] (transit-request-format {}))\n  ([opts]\n     (let [type (transit-type opts)\n           mime-type (if (or (= type :json)\n                             (= type :json-verbose)) \"json\" \"msgpack\")]\n       {:write (transit-write-fn type opts)\n        :content-type (str \"application/transit+\" mime-type)})))\n\n#? (:cljs (defn transit-read-fn [opts]\n            (let [reader (or (:reader opts)\n                             (t/reader :json opts))]\n              (fn transit-read-response [response]\n                (t/read reader (pr/-body response)))))\n    :clj (m/defn-curried transit-read-fn [request response]\n           (let [content-type (u/get-content-type response)\n                 type (if (.contains content-type \"msgpack\")\n                        :msgpack :json)\n                 stream (pr/-body response)\n                 reader (t/reader stream type request)]\n             (t/read reader))))\n\n(defn transit-response-format\n  \"Returns a Transit request format.\n\n   Options include:\n   :reader (CLJS only) Explicit Transit reader. If not supplied one will be created using the other options.\n   :handlers Custom Transit handlers (refer to Transit documentation)\"\n  ([] (transit-response-format {}))\n  ([opts]\n     (transit-response-format (transit-type opts) opts))\n  ([type opts]\n     (i/map->ResponseFormat\n      {:read (transit-read-fn opts)\n       :description \"Transit\"\n       :content-type\n       #? (:cljs [\"application/transit+json\"]\n           :clj [\"application/transit+msgpack\"\n                 \"application/transit+json\"])})))\n"],"mappings":";;;;;;AAQA,4BAAA,oCAAAA,hEAAMM;AAAN,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;WAAA,AAAAI,4CAAAJ,eAAA,lEAA4BM;AAA5B,AACE,IAAAC,mBAAID;AAAJ,AAAA,oBAAAC;AAAAA;;AAAA;;;AAEQ,gCAAA,hCAAMC,wEACHF,KAAKG;AADR,AAEE,IAAMC,SAAO,iBAAAH,mBAAI,AAAA,uFAASE;AAAb,AAAA,oBAAAF;AAAAA;;AACI,OAACI,uDAASL,KAAKG;;;AADhC,AAEE;sEAA0BG;AAA1B,AACE,OAACC,wBAAQH,OAAOE;;;;AAMhC,AAAA;;;;;;;;;sCAAA,8CAAAE,pFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,kEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,oEAAA,pEAAMD;AAAN,AAQM,yEAAA,lEAACE;;;AARP,AAAA,oEAAA,pEAAMF,+EASFP;AATJ,AAUK,IAAMH,OAAK,AAACD,0BAAaI;IACnBU,YAAU,4OAAA,OAAA,jPAAI,EAAI,kDAAA,lDAACC,6CAAEd,gEACH,kDAAA,lDAACc,6CAAEd;AAF3B,AAAA,kDAAA,iGAAA,zCAGU,AAACE,8BAAiBF,KAAKG,2EAChB,CAAA,mEAA4BU;;;AAdlD,AAAA,8DAAA,9DAAMH;;AAAN,AAgBU,+BAAA,/BAAMK,sEAAiBZ;AAAvB,AACE,IAAMa,SAAO,iBAAAf,mBAAI,AAAA,sFAASE;AAAb,AAAA,oBAAAF;AAAAA;;AACI,8DAAA,vDAACgB,4GAAed;;;AADjC,AAEE;sEAA2Be;AAA3B,AACE,OAACC,uBAAOH,OAAO,AAACI,qBAASF;;;;AASzC,AAAA;;;;;;;uCAAA,+CAAAV,tFAAMc;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAX,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,qEAAA,rEAAMW;AAAN,AAMM,0EAAA,nEAACC;;;AANP,AAAA,qEAAA,rEAAMD,gFAOFnB;AAPJ,AAQK,OAACqB,mEAAwB,AAACzB,0BAAaI,MAAMA;;;AARlD,AAAA,qEAAA,rEAAMmB,gFASFtB,KAAKG;AATT,AAUK,gDAAA,2CAAA,wFAAA,oEAAA,UAAA,qEAAA,mFAAA,lZAACsB,yIACO,AAACV,6BAAgBZ;;;AAX9B,AAAA,+DAAA,/DAAMmB;;AAAN","names":["p__28806","map__28807","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","ajax.transit/transit-type","type","or__3949__auto__","ajax.transit/transit-write-fn","opts","writer","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2","params","cognitect.transit/write","var_args","G__28812","ajax.transit/transit-request-format","js/Error","ajax.transit.transit_request_format.cljs$core$IFn$_invoke$arity$1","mime-type","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","ajax.transit/transit-read-fn","reader","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","response","cognitect.transit/read","ajax.protocols/-body","G__28817","ajax.transit/transit-response-format","ajax.transit.transit_response_format.cljs$core$IFn$_invoke$arity$1","ajax.transit.transit_response_format.cljs$core$IFn$_invoke$arity$2","ajax.interceptors/map->ResponseFormat"]}