{"version":3,"sources":["day8/re_frame/trace/events.cljs"],"sourcesContent":["(ns day8.re-frame.trace.events\n  (:require [mranderson047.re-frame.v0v10v2.re-frame.core :as rf]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.core :as r]\n            [cljs.tools.reader.edn]\n            [day8.re-frame.trace.utils.utils :as utils :refer [spy]]\n            [day8.re-frame.trace.utils.localstorage :as localstorage]\n            [clojure.string :as str]\n            [goog.object]\n            [re-frame.db]\n            [re-frame.interop]\n            [day8.re-frame.trace.view.container :as container]\n            [day8.re-frame.trace.styles :as styles]\n            [clojure.set :as set]\n            [day8.re-frame.trace.metamorphic :as metam]\n            [re-frame.trace]))\n\n(defn fixed-after\n  ;; Waiting on https://github.com/Day8/re-frame/issues/447\n  [f]\n  (rf/->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (:effects context) :db)\n                           (get-in context [:effects :db])\n                           (get-in context [:coeffects :db]))\n                   event (get-in context [:coeffects :event])]\n               (f db event)    ;; call f for side effects\n               context))))     ;; context is unchanged\n\n(defn log-trace? [trace]\n  (let [render-operation? (or (= (:op-type trace) :render)\n                              (= (:op-type trace) :componentWillUnmount))\n        component-path    (get-in trace [:tags :component-path] \"\")]\n    (if-not render-operation?\n      true\n      (not (str/includes? component-path \"devtools outer\")))))\n\n(defn disable-tracing! []\n  (re-frame.trace/remove-trace-cb ::cb))\n\n(defn enable-tracing! []\n  (re-frame.trace/register-trace-cb ::cb #(rf/dispatch [:epochs/receive-new-traces %])))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (clojure.core/get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn read-string-maybe [s]\n  (try (cljs.tools.reader.edn/read-string s)\n       (catch :default e\n         nil)))\n\n(rf/reg-event-db\n  :settings/panel-width%\n  (fn [db [_ width%]]\n    (localstorage/save! \"panel-width-ratio\" (max width% 0.05))\n    (assoc-in db [:settings :panel-width%] (max width% 0.05))))\n\n(rf/reg-event-db\n  :settings/selected-tab\n  (fn [db [_ selected-tab]]\n    (localstorage/save! \"selected-tab\" selected-tab)\n    (assoc-in db [:settings :selected-tab] selected-tab)))\n\n(rf/reg-event-db\n  :settings/toggle-settings\n  (fn [db _]\n    (update-in db [:settings :showing-settings?] not)))\n\n(rf/reg-event-db\n  :settings/show-panel?\n  (fn [db [_ show-panel?]]\n    (localstorage/save! \"show-panel\" show-panel?)\n    (assoc-in db [:settings :show-panel?] show-panel?)))\n\n(rf/reg-event-db\n  :settings/factory-reset\n  (fn [db _]\n    (localstorage/delete-all-keys!)\n    (js/location.reload)\n    db))\n\n(rf/reg-event-db\n  :settings/user-toggle-panel\n  (fn [db _]\n    (let [now-showing?    (not (get-in db [:settings :show-panel?]))\n          external-panel? (get-in db [:settings :external-window?])\n          using-trace?    (or external-panel? now-showing?)]\n      (if now-showing?\n        (enable-tracing!)\n        (when-not external-panel?\n          (disable-tracing!)))\n      (localstorage/save! \"using-trace?\" using-trace?)\n      (localstorage/save! \"show-panel\" now-showing?)\n      (-> db\n          (assoc-in [:settings :using-trace?] using-trace?)\n          (assoc-in [:settings :show-panel?] now-showing?)))))\n\n(rf/reg-event-db\n  :settings/pause\n  (fn [db _]\n    (assoc-in db [:settings :paused?] true)))\n\n(rf/reg-event-db\n  :settings/play\n  (fn [db _]\n    (-> db\n        (assoc-in [:settings :paused?] false)\n        (assoc-in [:epochs :current-epoch-index] nil)\n        (assoc-in [:epochs :current-epoch-id] nil))))\n\n(rf/reg-event-db\n  :settings/set-number-of-retained-epochs\n  (fn [db [_ num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n    (let [num (js/parseInt num-str)\n          num (if (and (not (js/isNaN num)) (pos-int? num))\n                num\n                5)]\n      (localstorage/save! \"retained-epochs\" num)\n      (assoc-in db [:settings :number-of-epochs] num))))\n\n(def ignored-event-mw\n  [(rf/path [:settings :ignored-events]) (fixed-after #(localstorage/save! \"ignored-events\" %))])\n\n(rf/reg-event-db\n  :settings/add-ignored-event\n  ignored-event-mw\n  (fn [ignored-events _]\n    (let [id (random-uuid)]\n      (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id]]\n    (dissoc ignored-events id)))\n\n(rf/reg-event-db\n  :settings/update-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe event-str)]\n      (-> ignored-events\n          (assoc-in [id :event-str] event-str)\n          (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-ignored-events\n  ignored-event-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def filtered-view-trace-mw\n  [(rf/path [:settings :filtered-view-trace]) (fixed-after #(localstorage/save! \"filtered-view-trace\" %))])\n\n(rf/reg-event-db\n  :settings/add-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace _]\n    (let [id (random-uuid)]\n      (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id]]\n    (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n  :settings/update-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe ns-str)]\n      (-> filtered-view-trace\n          (assoc-in [id :ns-str] ns-str)\n          (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def low-level-trace-mw [(rf/path [:settings :low-level-trace]) (fixed-after #(localstorage/save! \"low-level-trace\" %))])\n\n(rf/reg-event-db\n  :settings/set-low-level-trace\n  low-level-trace-mw\n  (fn [_ [_ low-level]]\n    low-level))\n\n(rf/reg-event-db\n  :settings/low-level-trace\n  low-level-trace-mw\n  (fn [low-level [_ trace-type capture?]]\n    (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n  :settings/debug?\n  (fn [db [_ debug?]]\n    (assoc-in db [:settings :debug?] debug?)))\n\n;; Global\n\n(defn mount [popup-window popup-document]\n  (let [app (.getElementById popup-document \"--re-frame-trace--\")\n        doc js/document]\n    (styles/inject-trace-styles popup-document)\n    (goog.object/set popup-window \"onunload\" #(rf/dispatch [:global/external-closed]))\n    (r/render\n      [(r/create-class\n         {:display-name   \"devtools outer external\"\n          :reagent-render (fn []\n                            [container/devtools-inner {:panel-type :popup}])})]\n      app)))\n\n(defn open-debugger-window\n  \"Copied from re-frisk.devtool/open-debugger-window\"\n  []\n  (let [{:keys [ext_height ext_width]} (:prefs {})\n        w (js/window.open \"\" \"Debugger\" (str \"width=\" (or ext_width 800) \",height=\" (or ext_height 800)\n                                             \",resizable=yes,scrollbars=yes,status=no,directories=no,toolbar=no,menubar=no\"))\n\n        d (.-document w)]\n    (.open d)\n    (.write d \"<head></head><body style=\\\"margin: 0px;\\\"><div id=\\\"--re-frame-trace--\\\" class=\\\"external-window\\\"></div></body>\")\n    (goog.object/set w \"onload\" #(mount w d))\n    (.close d)))\n\n(rf/reg-event-fx\n  :global/launch-external\n  (fn [ctx _]\n    (open-debugger-window)\n    (localstorage/save! \"external-window?\" true)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] true)\n     ;; TODO: capture the intent that the user is still interacting with devtools, to persist between reloads.\n     :dispatch-later [{:ms 200 :dispatch [:settings/show-panel? false]}]}))\n\n(rf/reg-event-fx\n  :global/external-closed\n  (fn [ctx _]\n    (localstorage/save! \"external-window?\" false)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] false)\n     :dispatch-later [{:ms 400 :dispatch [:settings/show-panel? true]}]}))\n\n(rf/reg-event-fx\n  :global/enable-tracing\n  (fn [ctx _]\n    (enable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/disable-tracing\n  (fn [ctx _]\n    (disable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/add-unload-hook\n  (fn [_ _]\n    (js/window.addEventListener \"beforeunload\" #(rf/dispatch-sync [:global/unloading? true]))\n    nil))\n\n(rf/reg-event-db\n  :global/unloading?\n  (fn [db [_ unloading?]]\n    (assoc-in db [:global :unloading?] unloading?)))\n\n;; Traces\n\n(defn save-filter-items [filter-items]\n  (localstorage/save! \"filter-items\" filter-items))\n\n(rf/reg-event-db\n  :traces/filter-items\n  (fn [db [_ filter-items]]\n    (save-filter-items filter-items)\n    (assoc-in db [:traces :filter-items] filter-items)))\n\n(rf/reg-event-db\n  :traces/add-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-input filter-type]]\n    (let [new-db (when-not (some #(= filter-input (:query %)) filter-items) ;; prevent duplicate filter strings\n                   ;; if existing, remove prior filter for :slower-than\n                   ;; TODO: rework how time filters are used.\n                   (let [filter-items (if (and (= :slower-than filter-type)\n                                               (some #(= filter-type (:filter-type %)) filter-items))\n                                        (remove #(= :slower-than (:filter-type %)) filter-items)\n                                        filter-items)]\n                     ;; add new filter\n                     (conj filter-items {:id          (random-uuid)\n                                         :query       (if (= filter-type :contains)\n                                                        (str/lower-case filter-input)\n                                                        (js/parseFloat filter-input))\n                                         :filter-type filter-type})))]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/remove-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-id]]\n    (let [new-db (remove #(= (:id %) filter-id) filter-items)]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/reset-filter-items\n  (fn [db _]\n    (let [new-db (dissoc-in db [:traces :filter-items])]\n      (save-filter-items (get-in new-db [:traces :filter-items]))\n      new-db)))\n\n(rf/reg-event-db\n  :traces/toggle-all-expansions\n  [(rf/path [:traces :expansions])]\n  (fn [trace-detail-expansions _]\n    (-> trace-detail-expansions\n        (assoc :overrides {})\n        (update :show-all? not))))\n\n(rf/reg-event-db\n  :traces/toggle-trace\n  [(rf/path [:traces :expansions])]\n  (fn [expansions [_ id]]\n    (let [showing? (get-in expansions [:overrides id] (:show-all? expansions))]\n      (update-in expansions [:overrides id] #(if showing? false (not %))))))\n\n(rf/reg-event-db\n  :traces/toggle-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    (let [new-categories (if (set/superset? categories new-categories)\n                           (set/difference categories new-categories)\n                           (set/union categories new-categories))]\n      (localstorage/save! \"categories\" new-categories)\n      new-categories)))\n\n(rf/reg-event-db\n  :traces/set-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    new-categories))\n\n\n(rf/reg-event-db\n  :trace-panel/update-show-epoch-traces?\n  [(rf/path [:trace-panel :show-epoch-traces?]) (fixed-after #(localstorage/save! \"show-epoch-traces?\" %))]\n  (fn [_ [k show-epoch-traces?]]\n    show-epoch-traces?))\n\n;; App DB\n\n(def app-db-path-mw\n  [(rf/path [:app-db :paths]) (fixed-after #(localstorage/save! \"app-db-paths\" %))])\n\n(rf/reg-event-db\n  :app-db/create-path\n  app-db-path-mw\n  (fn [paths _]\n\n    (assoc paths (js/Date.now) {:diff? false :open? true :path nil :path-str \"\" :valid-path? true})))\n\n\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n  :app-db/update-path\n  app-db-path-mw\n  (fn [paths [_ path-id path-str]]\n    (let [path  (read-string-maybe path-str)\n          paths (assoc-in paths [path-id :path-str] path-str)]\n      (if (or (and (some? path)\n                   (sequential? path))\n              (str/blank? path-str))\n        (-> paths\n            (assoc-in [path-id :path] path)\n            (assoc-in [path-id :valid-path?] true))\n        (assoc-in paths [path-id :valid-path?] false)))))\n\n(rf/reg-event-db\n  :app-db/update-path-blur\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (let [{:keys [valid-path? path]} (get paths path-id)]\n      (if valid-path?\n        paths\n        (-> (assoc-in paths [path-id :path-str] (pr-str path))\n            (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n  :app-db/set-path-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id open?]]\n    (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n  :app-db/set-diff-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in paths [path-id :open?]))]\n      (-> paths\n          (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n  :app-db/remove-path\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (dissoc paths path-id)))\n\n(rf/reg-event-db\n  :app-db/paths\n  app-db-path-mw\n  (fn [db [_ paths]]\n    paths))\n\n#_(rf/reg-event-db\n    :app-db/remove-path\n    (fn [db [_ path]]\n      (let [new-db (update-in db [:app-db :paths] #(remove (fn [p] (= p path)) %))]\n        (localstorage/save! \"app-db-paths\" (get-in new-db [:app-db :paths]))\n        ;; TODO: remove from json-ml expansions too.\n        new-db)))\n\n#_(rf/reg-event-db\n    :app-db/add-path\n    (fn [db _]\n      (let [search-string (get-in db [:app-db :search-string])\n            path          (try\n                            (when-not (str/blank? search-string)\n                              (cljs.reader/read-string (str \"[\" search-string \"]\")))\n                            (catch :default e\n                              nil))]\n        (if (some? path)\n          (do (localstorage/save! \"app-db-paths\" (cons path (get-in db [:app-db :paths])))\n              (rf/dispatch [:app-db/toggle-expansion [path]])\n              (-> db\n                  (update-in [:app-db :paths] #(cons path %))\n                  (assoc-in [:app-db :search-string] \"\")))\n          db))))\n\n(rf/reg-event-db\n  :app-db/search-string\n  (fn [db [_ search-string]]\n    (assoc-in db [:app-db :search-string] search-string)))\n\n(rf/reg-event-db\n  :app-db/set-json-ml-paths\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [db [_ paths]]\n    (localstorage/save! \"app-db-json-ml-expansions\" paths)\n    paths))\n\n(rf/reg-event-db\n  :app-db/toggle-expansion\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [paths [_ path]]\n    (let [new-paths (if (contains? paths path)\n                      (disj paths path)\n                      (conj paths path))]\n      (localstorage/save! \"app-db-json-ml-expansions\" new-paths)\n      new-paths)))\n\n(rf/reg-event-db\n  :app-db/reagent-id\n  [(rf/path [:app-db :reagent-id])]\n  (fn [paths _]\n    (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n(rf/reg-event-db\n  :snapshot/load-snapshot\n  (fn [db [_ new-db]]\n    (reset! re-frame.db/app-db new-db)\n    db))\n\n;;;\n\n(defn first-match-id\n  [m]\n  (-> m :match-info first :id))\n\n(rf/reg-event-db\n  :epochs/receive-new-traces\n  (fn [db [_ new-traces]]\n    (if-let [filtered-traces (->> (filter log-trace? new-traces)\n                                  (sort-by :id))]\n      (let [number-of-epochs-to-retain (get-in db [:settings :number-of-epochs])\n            events-to-ignore           (->> (get-in db [:settings :ignored-events]) vals (map :event-id) set)\n            previous-traces            (get-in db [:traces :all-traces] [])\n            parse-state                (get-in db [:epochs :parse-state] metam/initial-parse-state)\n            {drop-re-frame :re-frame drop-reagent :reagent} (get-in db [:settings :low-level-trace])\n            all-traces                 (reduce conj previous-traces filtered-traces)\n            parse-state                (metam/parse-traces parse-state filtered-traces)\n            ;; TODO:!!!!!!!!!!!!! We should be parsing everything else with the traces that span the newly matched\n            ;; epochs, not the filtered-traces, as these are only partial.\n            new-matches                (:partitions parse-state)\n            previous-matches           (get-in db [:epochs :matches] [])\n            parse-state                (assoc parse-state :partitions []) ;; Remove matches we know about\n            new-matches                (remove (fn [match]\n                                                 (let [event (get-in (metam/matched-event match) [:tags :event])]\n                                                   (contains? events-to-ignore (first event)))) new-matches)\n            ;; subscription-info is calculated separately from subscription-match-state because they serve different purposes:\n            ;; - subscription-info collects all the data that we know about the subscription itself, like its layer, inputs and other\n            ;;   things that are defined as part of the reg-sub.\n            ;; - subscription-match-state collects all the data that we know about the state of specific instances of subscriptions\n            ;;   like its reagent id, when it was created, run, disposed, what values it returned, e.t.c.\n            subscription-info          (metam/subscription-info (get-in db [:epochs :subscription-info] {}) filtered-traces (get-in db [:app-db :reagent-id]))\n            sub-state                  (get-in db [:epochs :sub-state] metam/initial-sub-state)\n            subscription-match-state   (metam/subscription-match-state sub-state all-traces new-matches)\n            subscription-matches       (rest subscription-match-state)\n\n            new-sub-state              (last subscription-match-state)\n            timing                     (mapv (fn [match]\n                                               ;; TODO: this isn't quite correct, shouldn't be using filtered-traces here\n                                               (let [epoch-traces   (into []\n                                                                          (comp\n                                                                            (utils/id-between-xf (:id (first match)) (:id (last match))))\n                                                                          filtered-traces)\n                                                     start-of-epoch (nth epoch-traces 0)\n                                                     finish-run     (or (first (filter metam/finish-run? epoch-traces))\n                                                                        (utils/last-in-vec epoch-traces))]\n                                                 {:re-frame/event-time (metam/elapsed-time start-of-epoch finish-run)}))\n                                             new-matches)\n\n            new-matches                (map (fn [match sub-match t] {:match-info match\n                                                                     :sub-state  sub-match\n                                                                     :timing     t})\n                                            new-matches subscription-matches timing)\n            all-matches                (reduce conj previous-matches new-matches)\n            retained-matches           (into [] (take-last number-of-epochs-to-retain all-matches))\n            first-id-to-retain         (first-match-id (first retained-matches))\n            retained-traces            (into [] (comp (drop-while #(< (:id %) first-id-to-retain))\n                                                      (remove (fn [trace]\n                                                                (or (when drop-reagent (metam/low-level-reagent-trace? trace))\n                                                                    (when drop-re-frame (metam/low-level-re-frame-trace? trace)))))) all-traces)]\n        (-> db\n            (assoc-in [:traces :all-traces] retained-traces)\n            (update :epochs (fn [epochs]\n                              (assoc epochs\n                                :matches retained-matches\n                                :matches-by-id (into {} (map (juxt first-match-id identity)) retained-matches)\n                                :match-ids (mapv first-match-id retained-matches)\n                                :parse-state parse-state\n                                :sub-state new-sub-state\n                                :subscription-info subscription-info)))))\n      ;; Else\n      db)))\n\n(rf/reg-event-fx\n  :epochs/previous-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (dec match-array-index))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:settings/pause]})\n      {:db       (assoc db :current-epoch-id (nth (:match-ids db) (- (count (:match-ids db)) 2)))\n       :dispatch [:settings/pause]})))\n\n(rf/reg-event-fx\n  :epochs/next-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (inc match-array-index))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:settings/pause]})\n      {:db       (assoc db :current-epoch-id (last (:match-ids db)))\n       :dispatch [:settings/pause]})))\n\n(rf/reg-event-db\n  :epochs/reset\n  (fn [db]\n    (re-frame.trace/reset-tracing!)\n    (dissoc db :epochs :traces)))\n\n;;\n\n(rf/reg-event-db\n  :subs/ignore-unchanged-l2-subs?\n  [(rf/path [:subs :ignore-unchanged-subs?])]\n  (fn [_ [_ ignore?]]\n    ignore?))\n\n(rf/reg-event-db\n  :subs/open-pod?\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id open?]]\n    (assoc-in expansions [id :open?] open?)))\n\n(rf/reg-event-db\n  :subs/diff-pod?\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id diff?]]\n    (assoc-in expansions [id :diff?] diff?)))\n"],"mappings":"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","names":["day8.re-frame.trace.events/fixed-after","f","G__21007","G__21008","G__21009","G__21010","mranderson047.re-frame.v0v10v2.re-frame.core/->interceptor","context","db","cljs.core/contains?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","event","day8.re-frame.trace.events/log-trace?","trace","render-operation?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","component-path","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","clojure.string/includes?","day8.re-frame.trace.events/disable-tracing!","re-frame.trace/remove-trace-cb","day8.re-frame.trace.events/enable-tracing!","p1__21020#","re-frame.trace/register-trace-cb","G__21021","mranderson047.re-frame.v0v10v2.re-frame.core/dispatch","p__21025","vec__21027","seq__21028","cljs.core/seq","first__21029","cljs.core/first","cljs.core/next","day8.re-frame.trace.events/dissoc-in","m","k","ks","keys","temp__5455__auto__","nextmap","cljs.core.get.cljs$core$IFn$_invoke$arity$2","newmap","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","day8.re-frame.trace.events/read-string-maybe","s","e21031","cljs.tools.reader.edn.read_string.cljs$core$IFn$_invoke$arity$1","e","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__21037","vec__21038","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","width%","day8.re-frame.trace.utils.localstorage/save!","x__4037__auto__","y__4038__auto__","cljs.core/assoc-in","p__21042","vec__21043","selected-tab","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__21049","vec__21050","show-panel?","day8.re-frame.trace.utils.localstorage/delete-all-keys!","js/location.reload","now-showing?","external-panel?","using-trace?","or__3949__auto__","p__21061","vec__21064","num-str","num","js/parseInt","js/isNaN","cljs.core/pos-int?","day8.re-frame.trace.events/ignored-event-mw","G__21070","mranderson047.re-frame.v0v10v2.re-frame.core/path","p1__21068#","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","ignored-events","id","cljs.core/random-uuid","js/Date.now","p__21076","vec__21077","p__21080","vec__21082","event-str","old-event","p__21088","vec__21089","day8.re-frame.trace.events/filtered-view-trace-mw","G__21094","p1__21092#","filtered-view-trace","p__21098","vec__21099","p__21103","vec__21104","ns-str","p__21110","vec__21111","day8.re-frame.trace.events/low-level-trace-mw","G__21115","p1__21114#","p__21117","vec__21118","low-level","p__21124","vec__21125","trace-type","capture?","p__21130","vec__21131","debug?","day8.re-frame.trace.events/mount","popup-window","popup-document","app","doc","js/document","day8.re-frame.trace.styles/inject-trace-styles","G__21137","G__21138","G__21139","goog.object/set","G__21142","mranderson047.reagent.v0v8v0_alpha2.reagent.core.render.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v8v0-alpha2.reagent.core/create-class","day8.re-frame.trace.view.container/devtools-inner","day8.re-frame.trace.events/open-debugger-window","map__21151","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","ext_height","ext_width","w","js/window.open","d","G__21159","G__21160","G__21161","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","ctx","js/window.addEventListener","G__21180","mranderson047.re-frame.v0v10v2.re-frame.core/dispatch-sync","p__21182","vec__21183","unloading?","day8.re-frame.trace.events/save-filter-items","filter-items","p__21189","vec__21190","G__21205","p__21209","vec__21210","filter-input","filter-type","new-db","p1__21201#","cljs.core/some","and__3938__auto__","p1__21202#","p1__21203#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.string/lower-case","js/parseFloat","G__21230","p__21232","vec__21233","filter-id","p1__21227#","G__21241","trace-detail-expansions","cljs.core.update.cljs$core$IFn$_invoke$arity$3","G__21247","p__21248","vec__21249","expansions","showing?","p1__21245#","G__21257","p__21258","vec__21259","categories","new-categories","clojure.set/superset?","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$2","G__21264","p__21265","vec__21267","G__21273","p1__21272#","p__21274","vec__21275","show-epoch-traces?","day8.re-frame.trace.events/app-db-path-mw","G__21280","p1__21279#","paths","p__21284","vec__21285","path-id","path-str","path","cljs.core/sequential?","clojure.string/blank?","p__21294","vec__21295","map__21298","valid-path?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","p__21304","vec__21305","open?","p__21309","vec__21310","diff?","p__21315","vec__21317","p__21320","vec__21321","p__21327","vec__21328","search-string","G__21334","p__21335","vec__21338","G__21342","p__21343","vec__21344","new-paths","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","G__21350","re-frame.interop/reagent-id","re-frame.db/app-db","p__21351","vec__21352","cljs.core/reset!","day8.re-frame.trace.events/first-match-id","p__21363","vec__21364","new-traces","filtered-traces","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","map__21370","number-of-epochs-to-retain","events-to-ignore","cljs.core/vals","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/set","previous-traces","parse-state","day8.re-frame.trace.metamorphic/initial-parse-state","drop-re-frame","drop-reagent","all-traces","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","day8.re-frame.trace.metamorphic/parse-traces","new-matches","previous-matches","match","day8.re-frame.trace.metamorphic/matched-event","subscription-info","day8.re-frame.trace.metamorphic/subscription-info","sub-state","day8.re-frame.trace.metamorphic/initial-sub-state","subscription-match-state","day8.re-frame.trace.metamorphic/subscription-match-state","subscription-matches","cljs.core/rest","new-sub-state","cljs.core/last","timing","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","epoch-traces","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$1","day8.re-frame.trace.utils.utils/id-between-xf","start-of-epoch","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","finish-run","day8.re-frame.trace.metamorphic/finish-run?","day8.re-frame.trace.utils.utils/last-in-vec","day8.re-frame.trace.metamorphic/elapsed-time","cljs.core.map.cljs$core$IFn$_invoke$arity$4","sub-match","t","all-matches","retained-matches","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/take-last","first-id-to-retain","retained-traces","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","p1__21361#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","day8.re-frame.trace.metamorphic/low-level-reagent-trace?","day8.re-frame.trace.metamorphic/low-level-re-frame-trace?","epochs","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__21379","p__21380","map__21381","temp__5459__auto__","current-id","match-ids","match-array-index","day8.re-frame.trace.utils.utils/find-index-in-vec","x","new-id","cljs.core/count","G__21385","p__21386","map__21387","re-frame.trace/reset-tracing!","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__21393","p__21394","vec__21398","ignore?","G__21401","p__21402","vec__21403","G__21406","p__21407","vec__21408"]}