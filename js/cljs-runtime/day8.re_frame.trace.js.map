{"version":3,"sources":["day8/re_frame/trace.cljs"],"sourcesContent":["(ns day8.re-frame.trace\n  (:require [day8.re-frame.trace.styles :as styles]\n            [day8.re-frame.trace.view.container :as container]\n            [day8.re-frame.trace.subs]\n            [day8.re-frame.trace.events]\n            [day8.re-frame.trace.db :as trace.db]\n            [re-frame.trace :as trace :include-macros true]\n            [clojure.string :as str]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.impl.util :as util]\n            [reagent.impl.component :as component]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [goog.object :as gob]\n            [re-frame.interop :as interop]\n            [mranderson047.re-frame.v0v10v2.re-frame.core :as rf]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.core :as r]))\n\n(goog-define debug? false)\n\n;; from https://github.com/reagent-project/reagent/blob/3fd0f1b1d8f43dbf169d136f0f905030d7e093bd/src/reagent/impl/component.cljs#L274\n(defn fiber-component-path [fiber]\n  (let [name   (some-> fiber\n                       ($ :type)\n                       ($ :displayName))\n        parent (some-> fiber\n                       ($ :return))\n        path   (some-> parent\n                       fiber-component-path\n                       (str \" > \"))\n        res    (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  (if-let [fiber (some-> c ($ :_reactInternalFiber))]\n    (fiber-component-path fiber)\n    (component/component-path c)))\n\n(defn comp-name [c]\n  (let [n (or (component-path c)\n              (some-> c .-constructor util/fun-name))]\n    (if-not (empty? n)\n      n\n      \"\")))\n\n(def static-fns\n  {:render\n   (fn mp-render []                                         ;; Monkeypatched render\n     (this-as c\n       (trace/with-trace {:op-type   :render\n                          :tags      {:component-path (component-path c)}\n                          :operation (last (str/split (component-path c) #\" > \"))}\n                         (if util/*non-reactive*\n                           (reagent.impl.component/do-render c)\n                           (let [rat        ($ c :cljsRatom)\n                                 _          (batch/mark-rendered c)\n                                 res        (if (nil? rat)\n                                              (ratom/run-in-reaction #(reagent.impl.component/do-render c) c \"cljsRatom\"\n                                                                     batch/queue-render reagent.impl.component/rat-opts)\n                                              (._run rat false))\n                                 cljs-ratom ($ c :cljsRatom)] ;; actually a reaction\n                             (trace/merge-trace!\n                               {:tags {:reaction      (interop/reagent-id cljs-ratom)\n                                       :input-signals (when cljs-ratom\n                                                        (map interop/reagent-id (gob/get cljs-ratom \"watching\" :none)))}})\n                             res)))))})\n\n\n(defonce real-custom-wrapper reagent.impl.component/custom-wrapper)\n(defonce real-next-tick reagent.impl.batching/next-tick)\n(defonce real-schedule reagent.impl.batching/schedule)\n(defonce do-after-render-trace-scheduled? (atom false))\n\n(defn monkey-patch-reagent []\n  (let [#_#_real-renderer reagent.impl.component/do-render\n        ]\n\n\n    #_(set! reagent.impl.component/do-render\n            (fn [c]\n              (let [name (comp-name c)]\n                (js/console.log c)\n                (trace/with-trace {:op-type   :render\n                                   :tags      {:component-path (component-path c)}\n                                   :operation (last (str/split name #\" > \"))}\n                                  (real-renderer c)))))\n\n    (set! reagent.impl.component/static-fns static-fns)\n\n    (set! reagent.impl.component/custom-wrapper\n          (fn [key f]\n            (case key\n              :componentWillUnmount\n              (fn [] (this-as c\n                       (trace/with-trace {:op-type   key\n                                          :operation (last (str/split (comp-name c) #\" > \"))\n                                          :tags      {:component-path (component-path c)\n                                                      :reaction       (interop/reagent-id ($ c :cljsRatom))}})\n                       (.call (real-custom-wrapper key f) c c)))\n\n              (real-custom-wrapper key f))))\n\n    (set! reagent.impl.batching/next-tick\n          (fn [f]\n            ;; Schedule a trace to be emitted after a render if there is nothing else scheduled after that render.\n            ;; This signals the end of the epoch.\n\n            #_(swap! do-after-render-trace-scheduled?\n                     (fn [scheduled?]\n                       (js/console.log \"Setting up scheduled after\" scheduled?)\n                       (if scheduled?\n                         scheduled?\n                         (do (reagent.impl.batching/do-after-render ;; a do-after-flush would probably be a better spot to put this if it existed.\n                               (fn []\n                                 (js/console.log \"Do after render\" reagent.impl.batching/render-queue)\n                                 (reset! do-after-render-trace-scheduled? false)\n                                 (when (false? (.-scheduled? reagent.impl.batching/render-queue))\n                                   (trace/with-trace {:op-type :reagent/quiescent}))))\n                             true))))\n            (real-next-tick (fn []\n                              (trace/with-trace {:op-type :raf}\n                                                (f)\n                                                (trace/with-trace {:op-type :raf-end})\n                                                (when (false? (.-scheduled? reagent.impl.batching/render-queue))\n                                                  (trace/with-trace {:op-type :reagent/quiescent}))\n\n                                                )))))\n\n    #_(set! reagent.impl.batching/schedule\n            (fn []\n              (reagent.impl.batching/do-after-render\n                (fn []\n                  (when @do-after-render-trace-scheduled?\n                    (trace/with-trace {:op-type :do-after-render})\n                    (reset! do-after-render-trace-scheduled? false))))\n              (real-schedule)))))\n\n\n(defn init-tracing!\n  \"Sets up any initial state that needs to be there for tracing. Does not enable tracing.\"\n  []\n  (monkey-patch-reagent))\n\n\n(defn resizer-style [draggable-area]\n  {:position \"absolute\" :z-index 2 :opacity 0\n   :left     (str (- (/ draggable-area 2)) \"px\") :width \"10px\" :height \"100%\" :top \"0px\" :cursor \"col-resize\"})\n\n(def ease-transition \"left 0.2s ease-out, top 0.2s ease-out, width 0.2s ease-out, height 0.2s ease-out\")\n\n(defn devtools-outer [opts]\n  ;; Add clear button\n  ;; Filter out different trace types\n  (let [position             (r/atom :right)\n        panel-width%         (rf/subscribe [:settings/panel-width%])\n        showing?             (rf/subscribe [:settings/show-panel?])\n        dragging?            (r/atom false)\n        pin-to-bottom?       (r/atom true)\n        selected-tab         (rf/subscribe [:settings/selected-tab])\n        window-width         (r/atom js/window.innerWidth)\n        handle-window-resize (fn [e]\n                               ;; N.B. I don't think this should be a perf bottleneck.\n                               (reset! window-width js/window.innerWidth))\n        handle-keys          (fn [e]\n                               (let [combo-key?      (or (.-ctrlKey e) (.-metaKey e) (.-altKey e))\n                                     tag-name        (.-tagName (.-target e))\n                                     key             (.-key e)\n                                     entering-input? (contains? #{\"INPUT\" \"SELECT\" \"TEXTAREA\"} tag-name)]\n                                 (when (and (not entering-input?) combo-key?)\n                                   (cond\n                                     (and (= key \"h\") (.-ctrlKey e))\n                                     (do (rf/dispatch [:settings/user-toggle-panel])\n                                         (.preventDefault e))))))\n        handle-mousemove     (fn [e]\n                               (when @dragging?\n                                 (let [x                (.-clientX e)\n                                       y                (.-clientY e)\n                                       new-window-width js/window.innerWidth]\n                                   (.preventDefault e)\n                                   (rf/dispatch [:settings/panel-width% (/ (- new-window-width x) new-window-width)])\n                                   (reset! window-width new-window-width))))\n        handle-mouse-up      (fn [e] (reset! dragging? false))]\n    (r/create-class\n      {:component-did-mount    (fn []\n                                 (js/window.addEventListener \"keydown\" handle-keys)\n                                 (js/window.addEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.addEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.addEventListener \"resize\" handle-window-resize))\n       :component-will-unmount (fn []\n                                 (js/window.removeEventListener \"keydown\" handle-keys)\n                                 (js/window.removeEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.removeEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.removeEventListener \"resize\" handle-window-resize))\n       :display-name           \"devtools outer\"\n       :reagent-render         (fn []\n                                 (let [draggable-area 10\n                                       left           (if @showing? (str (* 100 (- 1 @panel-width%)) \"%\")\n                                                                    (str @window-width \"px\"))\n                                       transition     (if @dragging?\n                                                        \"\"\n                                                        ease-transition)]\n                                   [:div.panel-wrapper\n                                    {:style {:position \"fixed\" :width \"0px\" :height \"0px\" :top \"0px\" :left \"0px\" :z-index 99999999}}\n                                    [:div.panel\n                                     {:style {:position   \"fixed\" :z-index 1 :box-shadow \"rgba(0, 0, 0, 0.3) 0px 0px 4px\" :background \"white\"\n                                              :display    \"flex\"\n                                              :left       left :top \"0px\" :width (str (* 100 @panel-width%) \"%\") :height \"100%\"\n                                              :transition transition}}\n                                     [:div.panel-resizer (when @showing? {:style         (resizer-style draggable-area)\n                                                                          :on-mouse-down #(reset! dragging? true)})]\n                                     [container/devtools-inner opts]]]))})))\n\n\n(defn panel-div []\n  (let [id    \"--re-frame-trace--\"\n        panel (.getElementById js/document id)]\n    (if panel\n      panel\n      (let [new-panel (.createElement js/document \"div\")]\n        (.setAttribute new-panel \"id\" id)\n        (.appendChild (.-body js/document) new-panel)\n        (js/window.focus new-panel)\n        new-panel))))\n\n(defn inject-devtools! []\n  (styles/inject-trace-styles js/document)\n  (r/render [devtools-outer {:panel-type :inline\n                             :debug?     debug?}] (panel-div)))\n\n(defn init-db! []\n  (trace.db/init-db debug?))\n\n(defn ^:export factory-reset! []\n  (rf/dispatch [:settings/factory-reset]))\n"],"mappings":"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","names":["goog/define","day8.re-frame.trace/fiber-component-path","fiber","name","G__24197","parent","G__24199","path","G__24200","res","cljs.core/empty?","day8.re-frame.trace/component-path","c","temp__5455__auto__","G__24212","reagent.impl.component/component-path","day8.re-frame.trace/comp-name","n","or__3949__auto__","G__24224","reagent.impl.util/fun-name","day8.re-frame.trace/static-fns","re-frame.trace/is-trace-enabled?","*current-trace*24237","re-frame.trace/*current-trace*","re-frame.trace/start-trace","end__20807__auto__","re-frame.interop/now","duration__20808__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","cljs.core/last","clojure.string.split.cljs$core$IFn$_invoke$arity$2","reagent.impl.util/*non-reactive*","reagent.impl.component/do-render","rat","_","reagent.impl.batching/mark-rendered","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","cljs-ratom","new-trace__20809__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-frame.interop/reagent-id","cljs.core.map.cljs$core$IFn$_invoke$arity$2","G__24278","G__24279","G__24280","G__24282","G__24283","G__24284","G__24285","G__24286","G__24287","G__24289","G__24290","G__24291","goog.object/get","js/day8","js/day8.re-frame","js/day8.re-frame.trace","js/day8.re-frame.trace.real-custom-wrapper","day8.re-frame.trace/real-custom-wrapper","reagent.impl.component/custom-wrapper","js/day8.re-frame.trace.real-next-tick","day8.re-frame.trace/real-next-tick","reagent.impl.batching/next-tick","js/day8.re-frame.trace.real-schedule","day8.re-frame.trace/real-schedule","reagent.impl.batching/schedule","js/day8.re-frame.trace.do-after-render-trace-scheduled?","day8.re-frame.trace/do-after-render-trace-scheduled?","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","day8.re-frame.trace/monkey-patch-reagent","reagent.impl.component/static-fns","key","f","G__24324","cljs.core/Keyword","*current-trace*24329","G__24341","*current-trace*24345","*current-trace*24367","*current-trace*24402","reagent.impl.batching/render-queue","*current-trace*24396","*current-trace*24414","day8.re-frame.trace/init-tracing!","day8.re-frame.trace/resizer-style","draggable-area","day8.re-frame.trace/ease-transition","day8.re-frame.trace/devtools-outer","opts","position","mranderson047.reagent.v0v8v0_alpha2.reagent.core.atom.cljs$core$IFn$_invoke$arity$1","panel-width%","G__24450","mranderson047.re-frame.v0v10v2.re-frame.core/subscribe","showing?","G__24451","dragging?","pin-to-bottom?","selected-tab","G__24453","window-width","js/window.innerWidth","handle-window-resize","e","cljs.core/reset!","handle-keys","combo-key?","tag-name","entering-input?","cljs.core/contains?","and__3938__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__24468","mranderson047.re-frame.v0v10v2.re-frame.core/dispatch","handle-mousemove","cljs.core/deref","x","y","new-window-width","G__24475","handle-mouse-up","mranderson047.reagent.v0v8v0-alpha2.reagent.core/create-class","js/window.addEventListener","js/window.removeEventListener","left","transition","day8.re-frame.trace.view.container/devtools-inner","day8.re-frame.trace/panel-div","id","panel","js/document","new-panel","js/window.focus","day8.re-frame.trace/inject-devtools!","day8.re-frame.trace.styles/inject-trace-styles","mranderson047.reagent.v0v8v0_alpha2.reagent.core.render.cljs$core$IFn$_invoke$arity$2","day8.re-frame.trace/debug?","day8.re-frame.trace/init-db!","day8.re-frame.trace.db/init-db","day8.re-frame.trace/factory-reset!","G__24512"]}