{"version":3,"sources":["day8/re_frame/trace/subs.cljs"],"sourcesContent":["(ns day8.re-frame.trace.subs\n  (:require [mranderson047.re-frame.v0v10v2.re-frame.core :as rf]\n            [day8.re-frame.trace.metamorphic :as metam]\n            [day8.re-frame.trace.utils.utils :as utils]\n            [clojure.string :as str]\n            [cljs.spec.alpha :as s]))\n\n(rf/reg-sub\n  :settings/root\n  (fn [db _]\n    (get db :settings)))\n\n(rf/reg-sub\n  :settings/panel-width%\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :panel-width%)))\n\n(rf/reg-sub\n  :settings/show-panel?\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :show-panel?)))\n\n(rf/reg-sub\n  :settings/selected-tab\n  :<- [:settings/root]\n  (fn [settings _]\n    (if (:showing-settings? settings)\n      :settings\n      (get settings :selected-tab))))\n\n(rf/reg-sub\n  :settings/paused?\n  :<- [:settings/root]\n  (fn [settings _]\n    (:paused? settings)))\n\n(rf/reg-sub\n  :settings/number-of-retained-epochs\n  :<- [:settings/root]\n  (fn [settings]\n    (:number-of-epochs settings)))\n\n(rf/reg-sub\n  :settings/ignored-events\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:ignored-events settings)))))\n\n(rf/reg-sub\n  :settings/filtered-view-trace\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:filtered-view-trace settings)))))\n\n(rf/reg-sub\n  :settings/low-level-trace\n  ;; TODO: filter from traces panel\n  ;; TODO: eventually drop these low level traces after computing the state we need from them.\n  :<- [:settings/root]\n  (fn [settings]\n    (:low-level-trace settings)))\n\n(rf/reg-sub\n  :settings/debug?\n  :<- [:settings/root]\n  (fn [settings]\n    (:debug? settings)))\n\n;; App DB\n\n(rf/reg-sub\n  :app-db/root\n  (fn [db _]\n    (get db :app-db)))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-after\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-after])))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-before\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-before])))\n\n(rf/reg-sub\n  :app-db/paths\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (map #(assoc (val %) :id (key %))\n         (get app-db-settings :paths))))\n\n(rf/reg-sub\n  :app-db/search-string\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :search-string)))\n\n(rf/reg-sub\n  :app-db/expansions\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :json-ml-expansions)))\n\n(rf/reg-sub\n  :app-db/node-expanded?\n  :<- [:app-db/expansions]\n  (fn [expansions [_ path]]\n    (contains? expansions path)))\n\n(rf/reg-sub\n  :app-db/reagent-id\n  :<- [:app-db/root]\n  (fn [root _]\n    (:reagent-id root)))\n\n;;\n\n(rf/reg-sub\n  :traces/trace-root\n  (fn [db _]\n    (:traces db)))\n\n(rf/reg-sub\n  :trace-panel/root\n  (fn [db _]\n    (:trace-panel db)))\n\n(rf/reg-sub\n  :traces/filter-items\n  (fn [db _]\n    (get-in db [:traces :filter-items])))\n\n(rf/reg-sub\n  :traces/expansions\n  (fn [db _]\n    (get-in db [:traces :expansions])))\n\n(rf/reg-sub\n  :traces/categories\n  (fn [db _]\n    (get-in db [:traces :categories])))\n\n(rf/reg-sub\n  :traces/all-traces\n  :<- [:traces/trace-root]\n  (fn [traces _]\n    (:all-traces traces)))\n\n(rf/reg-sub\n  :traces/number-of-traces\n  :<- [:traces/all-traces]\n  (fn [traces _]\n    (count traces)))\n\n(rf/reg-sub\n  :traces/current-event-traces\n  :<- [:traces/all-traces]\n  :<- [:epochs/beginning-trace-id]\n  :<- [:epochs/ending-trace-id]\n  (fn [[traces beginning ending] _]\n    (into [] (utils/id-between-xf beginning ending) traces)))\n\n(defn filter-ignored-views [[traces filtered-views] _]\n  (let [munged-ns (->> filtered-views\n                       (map (comp munge :ns-str))\n                       (set))]\n    (into []\n          ;; Filter out view namespaces we don't care about.\n          (remove\n            (fn [trace] (and (metam/render? trace)\n                             (contains? munged-ns (subs (:operation trace) 0 (str/last-index-of (:operation trace) \".\"))))))\n          traces)))\n\n(rf/reg-sub\n  :traces/current-event-visible-traces\n  :<- [:traces/current-event-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :traces/all-visible-traces\n  :<- [:traces/all-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :trace-panel/show-epoch-traces?\n  :<- [:trace-panel/root]\n  (fn [trace-root]\n    (:show-epoch-traces? trace-root)))\n\n;;\n\n(rf/reg-sub\n  :global/unloading?\n  (fn [db _]\n    (get-in db [:global :unloading?])))\n\n;;\n\n(rf/reg-sub\n  :snapshot/snapshot-root\n  (fn [db _]\n    (:snapshot db)))\n\n(rf/reg-sub\n  :snapshot/snapshot-ready?\n  :<- [:snapshot/snapshot-root]\n  (fn [snapshot _]\n    (contains? snapshot :current-snapshot)))\n\n;;\n\n(rf/reg-sub\n  :epochs/epoch-root\n  (fn [db _]\n    (:epochs db)))\n\n(rf/reg-sub\n  :epochs/current-match-state\n  :<- [:epochs/epoch-root]\n  :<- [:epochs/match-ids]\n  (fn [[epochs match-ids] _]\n    (let [current-id (:current-epoch-id epochs)\n          match      (cond\n                       (nil? current-id) (last (:matches epochs))\n                       (< current-id (first match-ids)) (first (:matches epochs))\n                       ;; This case seems impossible, but can happen if the user filters out\n                       ;; an event that they are 'on'.\n                       (> current-id (last match-ids)) (last (:matches epochs))\n                       :else (get (:matches-by-id epochs) current-id))]\n      match)))\n\n(rf/reg-sub\n  :epochs/current-match\n  :<- [:epochs/current-match-state]\n  (fn [match-state _]\n    (:match-info match-state)))\n\n(rf/reg-sub\n  :epochs/current-event-trace\n  :<- [:epochs/current-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  :epochs/current-event\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  :epochs/number-of-matches\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (count (get epochs :matches))))\n\n(rf/reg-sub\n  :epochs/current-event-index\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-index epochs)))\n\n(rf/reg-sub\n  :epochs/current-epoch-id\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-id epochs)))\n\n(rf/reg-sub\n  :epochs/match-ids\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:match-ids epochs)))\n\n(rf/reg-sub\n  :epochs/beginning-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (first match))))\n\n(rf/reg-sub\n  :epochs/ending-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (last match))))\n\n(rf/reg-sub\n  :epochs/older-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (or (nil? current)\n             (> current (nth ids 0))))))\n\n(rf/reg-sub\n  :epochs/newer-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (some? current)\n         (< current (utils/last-in-vec ids)))))\n\n;;\n\n(rf/reg-sub\n  :timing/total-epoch-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  :timing/animation-frame-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  :timing/animation-frame-count\n  :<- [:timing/animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(rf/reg-sub\n  :timing/animation-frame-time\n  :<- [:timing/animation-frame-traces]\n  (fn [frame-traces [_ frame-number]]\n    (let [frames (partition 2 frame-traces)\n          [start end] (first (drop (dec frame-number) frames))]\n      (metam/elapsed-time start end))))\n\n(rf/reg-sub\n  :timing/event-processing-time\n  :<- [:epochs/current-match-state]\n  (fn [match]\n    (get-in match [:timing :re-frame/event-time])))\n\n(rf/reg-sub\n  :timing/render-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  :timing/data-available?\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (not (empty? traces))))\n\n;;\n\n(rf/reg-sub\n  :subs/root\n  (fn [db _]\n    (:subs db)))\n\n(rf/reg-sub\n  :subs/all-sub-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter metam/subscription? traces)))\n\n(rf/reg-sub\n  :subs/subscription-info\n  :<- [:epochs/epoch-root]\n  (fn [epoch]\n    (:subscription-info epoch)))\n\n(rf/reg-sub\n  :subs/sub-state\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:sub-state epochs)))\n\n(rf/reg-sub\n  :subs/current-epoch-sub-state\n  :<- [:epochs/current-match-state]\n  (fn [match-state]\n    (:sub-state match-state)))\n\n(def string! (s/and string? #(not (empty? %))))\n\n(s/def :sub/id string!)\n(s/def :sub/reagent-id string!)\n(s/def :sub/run-types #{:sub/create :sub/dispose :sub/run :sub/not-run})\n(s/def :sub/order (s/nilable (s/coll-of :sub/run-types)))\n(s/def :sub/layer (s/nilable pos-int?))\n(s/def :sub/path-data any?)\n(s/def :sub/path string!)\n(s/def :sub/value any?)\n(s/def :sub/previous-value any?)\n(s/def :subs/view-panel-sub\n  (s/keys :req-un [:sub/id :sub/reagent-id :sub/order :sub/layer :sub/path-data :sub/path]\n          :opt-un [:sub/value :sub/previous-value]))\n(s/def :subs/view-subs (s/coll-of :subs/view-panel-sub))\n\n(defn sub-type-value\n  [sub-type]\n  (case sub-type\n    :sub/create 5\n    :sub/run 4\n    :sub/dispose 3\n    :sub/not-run 2\n    1))\n\n(defn accumulate-sub-value\n  \"Calculate a sorting value for a series of subscription trace types.\"\n  ;; A reader might reasonably ask, \"Why are we going to all this work here?\"\n  ;; We calculate a custom value rather than just comparing two order vectors,\n  ;; because the default compare logic for comparing vectors is to sort shorter\n  ;; vectors above longer ones, whereas we want all CRR, CR, C orders to be\n  ;; sorted adjacent to each other, in that order.\n  ;;\n  ;; The first sub type in the order is worth (n * 10^3),\n  ;; then the next one (if it exists), is worth (n * 10^2), and so-on.\n  [order]\n  (loop [exp   3\n         total 0\n         order order]\n    (if-let [sub-type (first order)]\n      (recur (dec exp) (+ total (* (sub-type-value sub-type) (js/Math.pow 10 exp))) (rest order))\n      total)))\n\n(def accumulate-sub-value-memoized\n  (memoize accumulate-sub-value))\n\n(defn sub-sort-val [order-x order-y]\n  ;; Note x and y are reversed here so that the \"highest\" sub orders get sorted first.\n  (compare (accumulate-sub-value-memoized order-y)\n           (accumulate-sub-value-memoized order-x)))\n\n(defn sub-op-type->type [t]\n  (case (:op-type t)\n    :sub/create :created\n    :sub/run :re-run\n    :sub/dispose :destroyed\n\n    :not-run))\n\n(defn prepare-pod-info\n  \"Returns sub info prepared for rendering in pods\"\n  [[sub-info sub-state] [subscription]]\n  (let [remove-fn (if (= subscription :subs/inter-epoch-subs)\n                    (fn [me] (nil? (:order (val me))))\n                    (constantly false))\n        subx      (->> sub-state\n                       (remove remove-fn)\n                       (map (fn [me] (let [state        (val me)\n                                           subscription (:subscription state)\n                                           sub          {:id         (key me)\n                                                         :reagent-id (key me)\n                                                         :layer      (get-in sub-info [(first subscription) :layer])\n                                                         :path-data  subscription\n                                                         :path       (pr-str subscription)\n                                                         :order      (or (:order state) [:sub/not-run])\n                                                         :sub/traits (:sub/traits state)}\n                                           sub          (if (contains? state :value)\n                                                          (assoc sub :value (:value state))\n                                                          sub)\n                                           sub          (if (contains? state :previous-value)\n                                                          (assoc sub :previous-value (:previous-value state))\n                                                          sub)]\n                                       sub)))\n                       (sort-by :order sub-sort-val)        ;; Also sort by subscription-id\n                       #_(sort-by :path))]\n    subx))\n\n\n(rf/reg-sub\n  :subs/pre-epoch-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:pre-epoch-state sub-state)))\n\n(rf/reg-sub\n  :subs/reaction-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:reaction-state sub-state)))\n\n(rf/reg-sub\n  :subs/inter-epoch-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/pre-epoch-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/all-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/reaction-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/visible-subs\n  :<- [:subs/all-subs]\n  :<- [:subs/ignore-unchanged-l2-subs?]\n  (fn [[all-subs ignore-unchanged-l2?]]\n    (if ignore-unchanged-l2?\n      (remove metam/unchanged-l2-subscription? all-subs)\n      all-subs)))\n\n(rf/reg-sub\n  :subs/sub-counts\n  :<- [:subs/visible-subs]\n  (fn [subs _]\n    (->> subs\n         (mapcat :order)\n         (frequencies))))\n\n(rf/reg-sub\n  :subs/created-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/create 0)))\n\n(rf/reg-sub\n  :subs/re-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/run 0)))\n\n(rf/reg-sub\n  :subs/destroyed-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/dispose 0)))\n\n(rf/reg-sub\n  :subs/not-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/not-run 0)))\n\n(rf/reg-sub\n  :subs/unchanged-l2-subs-count\n  :<- [:subs/all-subs]\n  (fn [subs]\n    (count (filter metam/unchanged-l2-subscription? subs))))\n\n(rf/reg-sub\n  :subs/ignore-unchanged-l2-subs?\n  :<- [:subs/root]\n  (fn [subs _]\n    (:ignore-unchanged-subs? subs true)))\n\n(rf/reg-sub\n  :subs/sub-expansions\n  :<- [:subs/root]\n  (fn [subs _]\n    (:expansions subs)))\n"],"mappings":"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","names":["G__23522","G__23523","mranderson047.re-frame.v0v10v2.re-frame.core/reg-sub","db","_","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__23527","G__23528","G__23529","G__23530","settings","G__23536","G__23537","G__23538","G__23539","G__23541","G__23542","G__23543","G__23544","G__23549","G__23550","G__23551","G__23552","G__23556","G__23557","G__23558","G__23559","G__23561","G__23562","G__23563","G__23564","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/vals","G__23568","G__23569","G__23570","G__23571","G__23581","G__23582","G__23583","G__23584","G__23586","G__23587","G__23588","G__23589","G__23594","G__23595","G__23602","G__23603","G__23604","G__23605","trace","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__23612","G__23613","G__23614","G__23615","G__23626","G__23627","G__23628","G__23629","app-db-settings","p1__23619#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/val","cljs.core/key","G__23645","G__23646","G__23647","G__23648","G__23651","G__23652","G__23653","G__23654","G__23660","G__23661","G__23662","G__23663","p__23666","vec__23669","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","expansions","path","cljs.core/contains?","G__23673","G__23674","G__23675","G__23676","root","G__23677","G__23678","G__23683","G__23684","G__23690","G__23691","G__23700","G__23701","G__23711","G__23712","G__23714","G__23715","G__23716","G__23717","traces","G__23719","G__23720","G__23721","G__23722","cljs.core/count","G__23723","G__23724","G__23725","G__23726","G__23727","G__23728","G__23729","G__23730","p__23745","vec__23746","beginning","ending","cljs.core.into.cljs$core$IFn$_invoke$arity$3","day8.re-frame.trace.utils.utils/id-between-xf","p__23755","vec__23756","day8.re-frame.trace.subs/filter-ignored-views","filtered-views","munged-ns","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/munge","cljs.core/set","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","and__3938__auto__","day8.re-frame.trace.metamorphic/render?","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2","G__23775","G__23776","G__23777","G__23778","G__23779","G__23780","G__23781","G__23782","G__23783","G__23784","G__23785","G__23786","G__23791","G__23792","G__23793","G__23794","trace-root","G__23795","G__23796","G__23798","G__23799","G__23805","G__23806","G__23807","G__23808","snapshot","G__23813","G__23814","G__23822","G__23823","G__23824","G__23825","G__23826","G__23827","p__23828","vec__23829","epochs","match-ids","current-id","match","cljs.core/last","cljs.core/first","G__23834","G__23835","G__23836","G__23837","match-state","G__23838","G__23839","G__23840","G__23841","day8.re-frame.trace.metamorphic/matched-event","G__23842","G__23843","G__23844","G__23845","G__23848","G__23849","G__23850","G__23851","G__23852","G__23853","G__23854","G__23855","G__23856","G__23857","G__23858","G__23859","G__23860","G__23861","G__23862","G__23863","G__23865","G__23866","G__23867","G__23868","G__23870","G__23871","G__23872","G__23873","G__23874","G__23875","G__23876","G__23877","G__23878","G__23879","p__23880","vec__23881","current","ids","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__23885","G__23886","G__23887","G__23888","G__23889","G__23890","p__23892","vec__23893","day8.re-frame.trace.utils.utils/last-in-vec","G__23896","G__23897","G__23898","G__23899","start-of-epoch","end-of-epoch","day8.re-frame.trace.metamorphic/elapsed-time","G__23901","G__23902","G__23903","G__23904","p1__23900#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","or__3949__auto__","day8.re-frame.trace.metamorphic/request-animation-frame?","day8.re-frame.trace.metamorphic/request-animation-frame-end?","G__23905","G__23906","G__23907","G__23908","frame-traces","G__23909","G__23910","G__23911","G__23912","p__23916","vec__23917","frame-number","vec__23920","frames","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","start","end","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","G__23923","G__23924","G__23925","G__23926","G__23927","G__23928","G__23929","G__23930","start-of-render","G__23931","G__23932","G__23933","G__23934","cljs.core/empty?","G__23938","G__23939","G__23940","G__23941","G__23942","G__23943","day8.re-frame.trace.metamorphic/subscription?","G__23944","G__23945","G__23946","G__23947","epoch","G__23948","G__23949","G__23950","G__23951","G__23952","G__23953","G__23954","G__23955","day8.re-frame.trace.subs/string!","cljs.spec.alpha/and-spec-impl","p1__23956#","cljs.core/string?","cljs.spec.alpha/def-impl","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__23963","cljs.core/coll?","cljs.core/pos-int?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__23967","cljs.core/map?","G__23971","day8.re-frame.trace.subs/sub-type-value","sub-type","G__23974","cljs.core/Keyword","day8.re-frame.trace.subs/accumulate-sub-value","order","exp","total","temp__5455__auto__","js/Math.pow","cljs.core/rest","day8.re-frame.trace.subs/accumulate-sub-value-memoized","cljs.core/memoize","day8.re-frame.trace.subs/sub-sort-val","order-x","order-y","cljs.core/compare","day8.re-frame.trace.subs/sub-op-type->type","t","G__23996","p__23998","p__23999","vec__24000","vec__24003","day8.re-frame.trace.subs/prepare-pod-info","sub-info","sub-state","subscription","remove-fn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","me","cljs.core/constantly","subx","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","state","sub","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","G__24012","G__24013","G__24014","G__24015","G__24016","G__24017","G__24018","G__24019","G__24021","G__24022","G__24023","G__24024","G__24025","G__24026","G__24029","G__24030","G__24031","G__24032","G__24033","G__24034","G__24038","G__24039","G__24040","G__24041","G__24042","G__24043","p__24046","vec__24047","all-subs","ignore-unchanged-l2?","day8.re-frame.trace.metamorphic/unchanged-l2-subscription?","G__24051","G__24052","G__24053","G__24054","subs","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/frequencies","G__24058","G__24059","G__24060","G__24061","counts","cljs.core.get.cljs$core$IFn$_invoke$arity$3","G__24063","G__24064","G__24065","G__24066","G__24067","G__24068","G__24069","G__24070","G__24071","G__24072","G__24073","G__24074","G__24076","G__24077","G__24078","G__24079","G__24089","G__24090","G__24091","G__24092","G__24093","G__24094","G__24095","G__24096"]}