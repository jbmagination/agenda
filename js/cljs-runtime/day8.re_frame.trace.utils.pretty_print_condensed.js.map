{"version":3,"sources":["day8/re_frame/trace/utils/pretty_print_condensed.cljs"],"sourcesContent":["(ns ^{:doc    \"Utilities for pretty-printing abbreviated Clojure forms\"\n      :author \"Matthew Huebert\"}\nday8.re-frame.trace.utils.pretty-print-condensed\n  (:require [clojure.string :as str]))\n\n\n(defn ^string truncate-string\n  \"Truncate a string to length `n`.\n\n  Removal occurs at `cut-from`, which may be :start, :end, or :middle.\n\n  Truncation is indicated by `\u2026` at start/end, or `...` at middle, for readability. \"\n  ([n string]\n   (n :end string))\n  ([n cut-from string]\n   (let [c (count string)]\n     (if (> c n)\n       (case cut-from\n         :start (str \"\u2026\" (subs string (- c (dec n)) c))\n         :end (str (subs string 0 (dec n)) \"\u2026\")\n         :middle (case n\n                   1 \"\u2026\"\n                   2 (truncate-string n :start string)\n                   3 (str (subs string 0 1) \"\u2026\" (subs string (dec c) c))\n                   (let [content-budget  (- n 2)\n                         per-side-budget (-> content-budget\n                                             (/ 2)\n                                             (js/Math.floor))]\n                     ;; 100 - 9 = 91 / 2 = 45\n                     ;; subs string 0\n                     (str (subs string 0 (cond-> per-side-budget\n                                                 (even? content-budget)\n                                                 (dec)))\n                          \"...\"\n                          (subs string (- c per-side-budget) c)))))\n       string))))\n\n(comment\n  (assert (= (truncate-string 5 :start \"123456789\") \"\u20266789\"))\n  (assert (= (truncate-string 5 :end \"123456789\") \"1234\u2026\"))\n\n  ;; special case use of \u2026 for short :middle-truncated strings\n  (assert (= (truncate-string 1 :middle \"123456789\") \"\u2026\"))\n  (assert (= (truncate-string 2 :middle \"123456789\") \"\u20269\"))\n  (assert (= (truncate-string 3 :middle \"123456789\") \"1\u20269\"))\n\n  (assert (= (truncate-string 4 :middle \"123456789\") \"...9\"))\n  (assert (= (truncate-string 5 :middle \"123456789\") \"1...9\"))\n  (assert (= (truncate-string 6 :middle \"123456789\") \"1...89\"))\n  (assert (= (truncate-string 7 :middle \"123456789\") \"12...89\"))\n  (assert (= (truncate-string 8 :middle \"123456789\") \"12...789\")))\n\n(defn ^string truncate-segments\n  ([s limit] (truncate-segments s limit #\"^[^.]+\\.\" \"\u2026\"))\n  ([s limit match trunc-prefix]\n   (if (<= (count s) limit)\n     s\n     (let [rep (str/replace s match trunc-prefix)]\n       (if (= rep s)\n         trunc-prefix\n         (recur (str/replace s match trunc-prefix)\n                limit\n                match\n                trunc-prefix))))))\n\n\n(comment\n  (assert (= (truncate-segments \"a.bcd\" 1) \"\u2026\"))\n  (assert (= (truncate-segments \"a.bcd\" 2) \"\u2026\"))\n  (assert (= (truncate-segments \"a.bcd\" 3) \"\u2026\"))\n  (assert (= (truncate-segments \"a.bcd\" 4) \"\u2026bcd\"))\n  (assert (= (truncate-segments \"a.bcd\" 5) \"a.bcd\"))\n  (assert (= (truncate-segments \"a.bcd\" 6) \"a.bcd\"))\n\n\n  (assert (= (truncate-segments \"a.b.c\" 1) \"\u2026\"))\n  (assert (= (truncate-segments \"a.b.c\" 2) \"\u2026c\"))\n  (assert (= (truncate-segments \"a.b.c\" 3) \"\u2026c\"))\n  (assert (= (truncate-segments \"a.b.c\" 4) \"\u2026b.c\"))\n  (assert (= (truncate-segments \"a.b.c\" 5) \"a.b.c\"))\n  (assert (= (truncate-segments \"a.b.c\" 6) \"a.b.c\")))\n\n(defn ^string truncate-named\n  \"Truncates `named`, which must satisfy INamed protocol, to within `n`\n   characters, cutting from beginning. Adds a `\u2026` prefix to indicate where\n   cutting has occurred.\"\n  [n named]\n  (let [the-ns         (namespace named)\n        the-name       (name named)\n        kw?            (keyword? named)\n        ns-prefix-size (if kw? 3 2)]\n    (if (or (> (count the-name) (if the-ns (- n ns-prefix-size) n))\n            (nil? the-ns))\n      (let [prefix (cond-> (if kw? \":\" \"\")\n                           the-ns (str \"\u2026/\"))]\n        (str prefix\n             (truncate-string (- n (count prefix)) :start the-name)))\n      (let [end       (str \"/\" the-name)\n            prefix    (if kw? \":\" \"\")\n            ns-budget (- n (count end) (count prefix))\n            ns-string (truncate-segments the-ns ns-budget)]\n        (str prefix\n             ns-string\n             end)))))\n\n\n(assert (= (truncate-named 12 :city/saskatoon)\n\n           \":\u2026/saskatoon\"))\n\n(comment\n\n  (assert (= (truncate-named 1 :saskatoon) \":\u2026\"))\n  (assert (= (truncate-named 2 :saskatoon) \":\u2026\"))\n  (assert (= (truncate-named 3 :saskatoon) \":\u2026n\"))\n  (assert (= (truncate-named 9 :saskatoon) \":\u2026skatoon\"))\n  (assert (= (truncate-named 10 :saskatoon) \":saskatoon\"))\n\n\n  (assert (= (truncate-named 1 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 2 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 3 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 4 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 5 :city/saskatoon) \":\u2026/\u2026n\"))\n  (assert (= (truncate-named 11 :city/saskatoon) \":\u2026/\u2026skatoon\"))\n  (assert (= (truncate-named 12 :city/saskatoon) \":\u2026/saskatoon\"))\n  (assert (= (truncate-named 13 :city/saskatoon) \":\u2026/saskatoon\"))\n  (assert (= (truncate-named 14 :city/saskatoon) \":\u2026/saskatoon\"))\n  (assert (= (truncate-named 15 :city/saskatoon) \":city/saskatoon\"))\n  (assert (= (truncate-named 16 :city/saskatoon) \":city/saskatoon\"))\n\n  (assert (= (truncate-named 8 'saskatoon) \"\u2026skatoon\"))\n  (assert (= (truncate-named 9 'saskatoon) \"saskatoon\"))\n  (assert (= (truncate-named 10 'saskatoon) \"saskatoon\"))\n\n  (assert (= (truncate-named 1 'city/saskatoon) \"\u2026/\u2026\"))\n  (assert (= (truncate-named 2 'city/saskatoon) \"\u2026/\u2026\"))\n  (assert (= (truncate-named 3 'city/saskatoon) \"\u2026/\u2026\"))\n  (assert (= (truncate-named 4 'city/saskatoon) \"\u2026/\u2026n\"))\n  (assert (= (truncate-named 10 'city/saskatoon) \"\u2026/\u2026skatoon\"))\n  (assert (= (truncate-named 11 'city/saskatoon) \"\u2026/saskatoon\"))\n  (assert (= (truncate-named 12 'city/saskatoon) \"\u2026/saskatoon\"))\n  (assert (= (truncate-named 13 'city/saskatoon) \"\u2026/saskatoon\"))\n  (assert (= (truncate-named 14 'city/saskatoon) \"city/saskatoon\"))\n  (assert (= (truncate-named 15 'city/saskatoon) \"city/saskatoon\")))\n\n(defn ^string truncate [n location param]\n  (if (satisfies? INamed param)\n    (truncate-named n param)\n    (truncate-string n location (str param))))\n\n(defn str->namespaced-sym [s]\n  (if (string? s)\n    (let [name (second (re-find #\"\\.([^.]+)$\" s))]\n      (if name (symbol (subs s 0 (- (count s) (count name) 1))\n                       name)\n               (symbol s)))\n    s))\n\n(defn edges\n  \"Return left and right edges of a collection (eg. brackets plus prefixes), defaults to [< >].\"\n  [coll]\n  (cond (map? coll) [\\{ \\}]\n        (vector? coll) [\\[ \\]]\n        (set? coll) [\"#{\" \\}]\n        (or (list? coll)\n            (seq? coll)) [\"(\" \")\"]\n        :else [\"<\" \">\"]))\n\n(defn with-edges\n  \"Wrap `value` with edges of `coll`\"\n  [coll value]\n  (let [[left right] (edges coll)]\n    (str left value right)))\n\n(defn pretty-condensed\n  \"Render form in abbreviated form, showing content only for keywords/strings/symbols and entering collections to a depth of 1.\"\n  ([form] (pretty-condensed 0 coll? 1 form))\n  ([depth enter-pred max-depth form]\n   (cond\n     (satisfies? INamed form) (truncate-named 16 form)\n     (string? form) (truncate-string 16 :middle form)\n     (fn? form) (or (some-> (.-name form)\n                            (str/replace #\"(^.*\\$)(.*)\" \"$2\"))\n                    \"\u0192\")\n     (number? form) (str form)\n     (and (enter-pred form)\n          (< depth max-depth)) (with-edges form\n                                           (str/join \", \" (mapv (partial pretty-condensed (inc depth) enter-pred max-depth) form)))\n     :else (with-edges form \"\u2026\"))))\n"],"mappings":"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","names":["var_args","G__20312","day8.re-frame.trace.utils.pretty-print-condensed/truncate-string","js/Error","n","string","G__20313","G__20314","cut-from","c","cljs.core/count","G__20315","cljs.core/Keyword","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","G__20316","day8.re_frame.trace.utils.pretty_print_condensed.truncate_string.cljs$core$IFn$_invoke$arity$3","content-budget","per-side-budget","js/Math.floor","G__20317","cljs.core/even?","G__20319","day8.re-frame.trace.utils.pretty-print-condensed/truncate-segments","s","limit","day8.re_frame.trace.utils.pretty_print_condensed.truncate_segments.cljs$core$IFn$_invoke$arity$4","match","trunc-prefix","rep","clojure.string/replace","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","day8.re-frame.trace.utils.pretty-print-condensed/truncate-named","named","the-ns","cljs.core/namespace","the-name","cljs.core/name","kw?","ns-prefix-size","prefix","G__20321","end","ns-budget","ns-string","day8.re_frame.trace.utils.pretty_print_condensed.truncate_segments.cljs$core$IFn$_invoke$arity$2","day8.re-frame.trace.utils.pretty-print-condensed/truncate","location","param","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/INamed","day8.re-frame.trace.utils.pretty-print-condensed/str->namespaced-sym","name","cljs.core/second","cljs.core/re-find","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","day8.re-frame.trace.utils.pretty-print-condensed/edges","coll","cljs.core/map?","cljs.core/vector?","cljs.core/set?","cljs.core/list?","cljs.core/seq?","day8.re-frame.trace.utils.pretty-print-condensed/with-edges","value","vec__20329","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","left","right","G__20335","day8.re-frame.trace.utils.pretty-print-condensed/pretty-condensed","form","day8.re_frame.trace.utils.pretty_print_condensed.pretty_condensed.cljs$core$IFn$_invoke$arity$4","cljs.core/coll?","depth","enter-pred","max-depth","cljs.core/fn?","or__3949__auto__","G__20344","and__3938__auto__","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$4"]}