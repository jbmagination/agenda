{"version":3,"sources":["day8/re_frame/trace/view/traces.cljs"],"sourcesContent":["(ns day8.re-frame.trace.view.traces\n  (:require [day8.re-frame.trace.view.components :as components]\n            [day8.re-frame.trace.utils.pretty-print-condensed :as pp]\n            [clojure.string :as str]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.core :as r]\n            [mranderson047.re-frame.v0v10v2.re-frame.core :as rf]\n            [day8.re-frame.trace.utils.re-com :as rc]))\n\n(defn query->fn [query]\n  (if (= :contains (:filter-type query))\n    (fn [trace]\n      (str/includes? (str/lower-case (str (:operation trace) \" \" (:op-type trace)))\n                     (:query query)))\n    (fn [trace]\n      (< (:query query) (:duration trace)))))\n\n(defn add-filter [filter-items filter-input filter-type]\n  (rf/dispatch [:traces/add-filter filter-input filter-type]))\n\n(defn render-traces [visible-traces filter-items filter-input trace-detail-expansions]\n  (let [debug? @(rf/subscribe [:settings/debug?])]\n    (doall\n      (->>\n        visible-traces\n        (map-indexed (fn [index {:keys [op-type id operation tags duration] :as trace}]\n                       (let [show-row? (get-in @trace-detail-expansions [:overrides id]\n                                               (:show-all? @trace-detail-expansions))\n                             op-name   (if (vector? operation)\n                                         (second operation)\n                                         operation)\n                             #_#__ (js/console.log (devtools/header-api-call tags))]\n                         (list [:tr {:key      id\n                                     :on-click #(rf/dispatch [:traces/toggle-trace id])\n                                     :class    (str/join \" \" [\"trace--trace\"\n                                                              (case op-type\n                                                                :sub/create \"trace--sub-create\"\n                                                                :sub/run \"trace--sub-run\"\n                                                                :sub/dispose \"trace--sub-run\"\n                                                                :event \"trace--event\"\n                                                                :render \"trace--render\"\n                                                                :re-frame.router/fsm-trigger \"trace--fsm-trigger\"\n                                                                nil)])}\n                                [:td.trace--toggle\n                                 [:button.expansion-button (if show-row? \"\u25bc\" \"\u25b6\")]]\n                                [:td.trace--op\n                                 [:span.op-string {:on-click (fn [ev]\n                                                               (add-filter filter-items (name op-type) :contains)\n                                                               (.stopPropagation ev))}\n                                  (str op-type)]]\n                                [:td.trace--op-string\n                                 [:span.op-string {:on-click (fn [ev]\n                                                               (add-filter filter-items (name op-name) :contains)\n                                                               (.stopPropagation ev))}\n                                  (pp/truncate 20 :middle (pp/str->namespaced-sym op-name)) \" \"\n                                  [:span\n                                   {:style {:opacity 0.5\n                                            :display \"inline-block\"}}\n                                   (when-let [[_ & params] (or (get tags :query-v)\n                                                               (get tags :event))]\n                                     (->> (map pp/pretty-condensed params)\n                                          (str/join \", \")\n                                          (pp/truncate-string :middle 40)))]]]\n                                (if debug?\n                                  [:td.trace--meta\n                                   (:reaction (:tags trace)) \"/\" id]\n                                  [:td.trace--meta\n\n                                   (.toFixed duration 1) \" ms\"])]\n                               (when show-row?\n                                 [:tr.trace--details {:key       (str id \"-details\")\n                                                      :tab-index 0}\n                                  [:td]\n                                  [:td.trace--details-tags {:col-span 2\n                                                            :on-click #(.log js/console trace)}\n                                   [:div.trace--details-tags-text\n                                    (let [tag-str (prn-str tags)]\n                                      (str (subs tag-str 0 400)\n                                           (when (< 400 (count tag-str))\n                                             \" ...\")))]]\n                                  [:td.trace--meta.trace--details-icon\n                                   {:on-click #(.log js/console tags)}]])))))))))\n\n(defn render []\n  (let [filter-input            (r/atom \"\")\n        filter-items            (rf/subscribe [:traces/filter-items])\n        filter-type             (r/atom :contains)\n        input-error             (r/atom false)\n        categories              (rf/subscribe [:traces/categories])\n        trace-detail-expansions (rf/subscribe [:traces/expansions])\n        beginning               (rf/subscribe [:epochs/beginning-trace-id])\n        end                     (rf/subscribe [:epochs/ending-trace-id])\n        traces                  (rf/subscribe [:traces/all-visible-traces])\n        current-traces          (rf/subscribe [:traces/current-event-visible-traces])\n        show-epoch-traces?      (rf/subscribe [:trace-panel/show-epoch-traces?])]\n    (fn []\n      (let [toggle-category-fn #(rf/dispatch [:traces/toggle-categories %])\n            traces-to-filter   (if @show-epoch-traces?\n                                 @current-traces\n                                 @traces)\n            visible-traces     (cond->> traces-to-filter\n                                        ;; Remove cached subscriptions. Could add this back in as a setting later\n                                        ;; but it's pretty low signal/noise 99% of the time.\n                                        true (remove (fn [trace] (and (= :sub/create (:op-type trace))\n                                                                      (get-in trace [:tags :cached?]))))\n                                        (seq @categories) (filter (fn [trace] (when (contains? @categories (:op-type trace)) trace)))\n                                        (seq @filter-items) (filter (apply every-pred (map query->fn @filter-items)))\n                                        true (sort-by :id))\n            save-query         (fn [_]\n                                 (if (and (= @filter-type :slower-than)\n                                          (js/isNaN (js/parseFloat @filter-input)))\n                                   (reset! input-error true)\n                                   (do\n                                     (reset! input-error false)\n                                     (add-filter filter-items @filter-input @filter-type))))]\n\n        [:div.tab-contents\n         [:div.filter\n          [:div.filter-control\n           [:ul.filter-categories \"show: \"\n            [:li.filter-category {:class    (when (contains? @categories :event) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:event}])}\n             \"events\"]\n            [:li.filter-category {:class    (when (contains? @categories :sub/run) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:sub/run :sub/create :sub/dispose}])}\n             \"subscriptions\"]\n            [:li.filter-category {:class    (when (contains? @categories :render) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:render}])}\n             \"reagent\"]\n            [:li.filter-category {:class    (when (contains? @categories :re-frame.router/fsm-trigger) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:re-frame.router/fsm-trigger :componentWillUnmount}])}\n             \"internals\"]]\n           [rc/checkbox\n            :model show-epoch-traces?\n            :on-change #(rf/dispatch [:trace-panel/update-show-epoch-traces? %])\n            :label \"Show only traces for this epoch?\"]\n           [:div.filter-fields\n            [:select {:value     @filter-type\n                      :on-change #(reset! filter-type (keyword (.. % -target -value)))}\n             [:option {:value \"contains\"} \"contains\"]\n             [:option {:value \"slower-than\"} \"slower than\"]]\n            [:div.filter-control-input {:style {:margin-left 10}}\n             [components/search-input {:on-save   save-query\n                                       :on-change #(reset! filter-input (.. % -target -value))}]\n             (if @input-error\n               [:div.input-error {:style {:color \"red\" :margin-top 5}}\n                \"Please enter a valid number.\"])]]]\n          [:ul.filter-items\n           (map (fn [item]\n                  ^{:key (:id item)}\n                  [:li.filter-item\n                   [:button.button\n                    {:style    {:margin 0}\n                     :on-click #(rf/dispatch [:traces/remove-filter (:id item)])}\n                    (:filter-type item) \": \" [:span.filter-item-string (:query item)]]])\n                @filter-items)]]\n         [components/autoscroll-list {:class \"panel-content-scrollable\" :scroll? true}\n          [:table\n           [:thead>tr\n            [:th {:style {:padding 0}}\n             [:button.text-button\n              {:style    {:cursor \"pointer\"}\n               :on-click #(rf/dispatch [:traces/toggle-all-expansions])}\n              (if (:show-all? @trace-detail-expansions) \"-\" \"+\")]]\n            [:th \"operations\"]\n            [:th\n             [:button {:class    (str/join \" \" [\"filter-items-count\"\n                                                (when (pos? (count @filter-items)) \"active\")])\n                       :on-click #(rf/dispatch [:traces/reset-filter-items])}\n              (when (pos? (count @filter-items))\n                (str (count visible-traces) \" of \"))\n              (str (count @current-traces))]\n             \" traces \"\n             (when (pos? (count @current-traces))\n               [:span \"(\" [:button.text-button {:on-click #(rf/dispatch [:epochs/reset])} \"clear\"] \")\"])]\n            [:th {:style {:text-align \"right\"}} \"meta\"]]\n           [:tbody (render-traces visible-traces filter-items filter-input trace-detail-expansions)]]]]))))\n"],"mappings":"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","names":["day8.re-frame.trace.view.traces/query->fn","query","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","trace","clojure.string/includes?","clojure.string/lower-case","day8.re-frame.trace.view.traces/add-filter","filter-items","filter-input","filter-type","G__20376","mranderson047.re-frame.v0v10v2.re-frame.core/dispatch","day8.re-frame.trace.view.traces/render-traces","visible-traces","trace-detail-expansions","cljs.core/deref","debug?","G__20398","mranderson047.re-frame.v0v10v2.re-frame.core/subscribe","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","p__20399","map__20404","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","index","op-type","id","operation","tags","duration","show-row?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","op-name","cljs.core/vector?","cljs.core/second","cljs.core/List","G__20416","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__20417","cljs.core/Keyword","ev","cljs.core/name","day8.re-frame.trace.utils.pretty-print-condensed/truncate","day8.re-frame.trace.utils.pretty-print-condensed/str->namespaced-sym","temp__5457__auto__","vec__20418","seq__20419","cljs.core/seq","first__20420","cljs.core/first","cljs.core/next","_","params","or__3949__auto__","cljs.core.map.cljs$core$IFn$_invoke$arity$2","day8.re-frame.trace.utils.pretty-print-condensed/pretty-condensed","day8.re_frame.trace.utils.pretty_print_condensed.truncate_string.cljs$core$IFn$_invoke$arity$3","js/console","tag-str","cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","day8.re-frame.trace.view.traces/render","mranderson047.reagent.v0v8v0_alpha2.reagent.core.atom.cljs$core$IFn$_invoke$arity$1","G__20450","input-error","categories","G__20452","G__20454","beginning","G__20456","end","G__20457","traces","G__20458","current-traces","G__20459","show-epoch-traces?","G__20460","p1__20421#","p1__20433#","p1__20434#","p1__20437#","toggle-category-fn","G__20461","traces-to-filter","G__20462","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","and__3938__auto__","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/contains?","cljs.core/every-pred","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","save-query","js/isNaN","js/parseFloat","cljs.core/reset!","G__20468","G__20469","G__20470","G__20471","day8.re-frame.trace.utils.re-com/checkbox","G__20472","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","day8.re-frame.trace.view.components/search-input","item","G__20477","day8.re-frame.trace.view.components/autoscroll-list","G__20478","G__20479","G__20483"]}