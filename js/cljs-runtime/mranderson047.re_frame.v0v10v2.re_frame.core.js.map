{"version":3,"sources":["mranderson047/re_frame/v0v10v2/re_frame/core.cljc"],"sourcesContent":["(ns mranderson047.re-frame.v0v10v2.re-frame.core\n  (:require\n    [mranderson047.re-frame.v0v10v2.re-frame.events           :as events]\n    [mranderson047.re-frame.v0v10v2.re-frame.subs             :as subs]\n    [mranderson047.re-frame.v0v10v2.re-frame.interop          :as interop]\n    [mranderson047.re-frame.v0v10v2.re-frame.db               :as db]\n    [mranderson047.re-frame.v0v10v2.re-frame.fx               :as fx]\n    [mranderson047.re-frame.v0v10v2.re-frame.cofx             :as cofx]\n    [mranderson047.re-frame.v0v10v2.re-frame.router           :as router]\n    [mranderson047.re-frame.v0v10v2.re-frame.loggers          :as loggers]\n    [mranderson047.re-frame.v0v10v2.re-frame.registrar        :as registrar]\n    [mranderson047.re-frame.v0v10v2.re-frame.interceptor      :as interceptor]\n    [mranderson047.re-frame.v0v10v2.re-frame.std-interceptors :as std-interceptors :refer [db-handler->interceptor\n                                                             fx-handler->interceptor\n                                                             ctx-handler->interceptor]]\n    [clojure.set               :as set]))\n\n\n;; -- API ---------------------------------------------------------------------\n;;\n;; This namespace represents the mranderson047.re-frame.v0v10v2.re-frame API\n;;\n;; Below, you'll see we've used this technique:\n;;   (def  api-name-for-fn    deeper.namespace/where-the-defn-is)\n;;\n;; So, we promote a `defn` in a deeper namespace \"up\" to the API\n;; via a `def` in this namespace.\n;;\n;; Turns out, this approach makes it hard:\n;;   - to auto-generate API docs\n;;   - for IDEs to provide code completion on functions in the API\n;;\n;; Which is annoying. But there are pros and cons and we haven't\n;; yet revisited the decision.  To compensate, we've added more nudity\n;; to the docs.\n;;\n\n\n;; -- dispatch ----------------------------------------------------------------\n(def dispatch       router/dispatch)\n(def dispatch-sync  router/dispatch-sync)\n\n\n;; -- subscriptions -----------------------------------------------------------\n(def reg-sub        subs/reg-sub)\n(def subscribe      subs/subscribe)\n\n(def clear-sub (partial registrar/clear-handlers subs/kind))  ;; think unreg-sub\n(def clear-subscription-cache! subs/clear-subscription-cache!)\n\n(defn reg-sub-raw\n  \"This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md\"\n  [query-id handler-fn]\n  (registrar/register-handler subs/kind query-id handler-fn))\n\n\n;; -- effects -----------------------------------------------------------------\n(def reg-fx      fx/reg-fx)\n(def clear-fx    (partial registrar/clear-handlers fx/kind))  ;; think unreg-fx\n\n;; -- coeffects ---------------------------------------------------------------\n(def reg-cofx    cofx/reg-cofx)\n(def inject-cofx cofx/inject-cofx)\n(def clear-cofx (partial registrar/clear-handlers cofx/kind)) ;; think unreg-cofx\n\n\n;; -- Events ------------------------------------------------------------------\n\n(defn reg-event-db\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.\"\n  ([id handler]\n    (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (db-handler->interceptor handler)])))\n\n\n(defn reg-event-fx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.\"\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (fx-handler->interceptor handler)])))\n\n\n(defn reg-event-ctx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. \"\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (ctx-handler->interceptor handler)])))\n\n(def clear-event (partial registrar/clear-handlers events/kind)) ;; think unreg-event-*\n\n;; -- interceptors ------------------------------------------------------------\n\n;; Standard interceptors.\n;; Detailed docs on each in std-interceptors.cljs\n(def debug       std-interceptors/debug)\n(def path        std-interceptors/path)\n(def enrich      std-interceptors/enrich)\n(def trim-v      std-interceptors/trim-v)\n(def after       std-interceptors/after)\n(def on-changes  std-interceptors/on-changes)\n\n\n;; Utility functions for creating your own interceptors\n;;\n;;  (def my-interceptor\n;;     (->interceptor                ;; used to create an interceptor\n;;       :id     :my-interceptor     ;; an id - decorative only\n;;       :before (fn [context]                         ;; you normally want to change :coeffects\n;;                  ... use get-coeffect  and assoc-coeffect\n;;                       )\n;;       :after  (fn [context]                         ;; you normally want to change :effects\n;;                 (let [db (get-effect context :db)]  ;; (get-in context [:effects :db])\n;;                   (assoc-effect context :http-ajax {...}])))))\n;;\n(def ->interceptor   interceptor/->interceptor)\n(def get-coeffect    interceptor/get-coeffect)\n(def assoc-coeffect  interceptor/assoc-coeffect)\n(def get-effect      interceptor/get-effect)\n(def assoc-effect    interceptor/assoc-effect)\n(def enqueue         interceptor/enqueue)\n\n\n;; --  logging ----------------------------------------------------------------\n;; Internally, mranderson047.re-frame.v0v10v2.re-frame uses the logging functions: warn, log, error, group and groupEnd\n;; By default, these functions map directly to the js/console implementations,\n;; but you can override with your own fns (set or subset).\n;; Example Usage:\n;;   (defn my-fn [& args]  (post-it-somewhere (apply str args)))  ;; here is my alternative\n;;   (mranderson047.re-frame.v0v10v2.re-frame.core/set-loggers!  {:warn my-fn :log my-fn})       ;; override the defaults with mine\n(def set-loggers! loggers/set-loggers!)\n\n;; If you are writing an extension to re-frame, like perhaps\n;; an effects handler, you may want to use mranderson047.re-frame.v0v10v2.re-frame logging.\n;;\n;; usage: (console :error \"Oh, dear God, it happened: \" a-var \" and \" another)\n;;        (console :warn \"Possible breach of containment wall at: \" dt)\n(def console loggers/console)\n\n\n;; -- unit testing ------------------------------------------------------------\n\n(defn make-restore-fn\n  \"Checkpoints the state of mranderson047.re-frame.v0v10v2.re-frame and returns a function which, when\n  later called, will restore mranderson047.re-frame.v0v10v2.re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  \"\n  []\n  (let [handlers @registrar/kind->id->handler\n        app-db   @db/app-db\n\t\t\t\tsubs-cache @subs/query->reaction]\n    (fn []\n\t\t\t;; call `dispose!` on all current subscriptions which\n\t\t\t;; didn't originally exist.\n      (let [original-subs (set (vals subs-cache))\n            current-subs  (set (vals @subs/query->reaction))]\n        (doseq [sub (set/difference current-subs original-subs)]\n          (interop/dispose! sub)))\n\n      ;; Reset the atoms\n      ;; We don't need to reset subs/query->reaction, as\n      ;; disposing of the subs removes them from the cache anyway\n      (reset! registrar/kind->id->handler handlers)\n      (reset! db/app-db app-db)\n      nil)))\n\n\n;; -- Event Processing Callbacks  ---------------------------------------------\n\n(defn add-post-event-callback\n  \"Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \\\"add time\\\" so it can subsequently\n  be used at \\\"remove time\\\" to get rid of the right callback.\n  \"\n  ([f]\n   (add-post-event-callback f f))   ;; use f as its own identifier\n  ([id f]\n   (router/add-post-event-callback mranderson047.re-frame.v0v10v2.re-frame.router/event-queue id f)))\n\n\n(defn remove-post-event-callback\n  [id]\n  (router/remove-post-event-callback mranderson047.re-frame.v0v10v2.re-frame.router/event-queue id))\n\n\n;; --  Deprecation ------------------------------------------------------------\n;; Assisting the v0.7.x ->  v0.8.x transition.\n(defn register-handler\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of \" (str (first args)) \")\")\n  (apply reg-event-db args))\n\n(defn register-sub\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of \" (str (first args)) \")\")\n  (apply reg-sub-raw args))\n"],"mappings":"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","names":["mranderson047.re-frame.v0v10v2.re-frame.core/dispatch","mranderson047.re-frame.v0v10v2.re-frame.router/dispatch","mranderson047.re-frame.v0v10v2.re-frame.core/dispatch-sync","mranderson047.re-frame.v0v10v2.re-frame.router/dispatch-sync","mranderson047.re-frame.v0v10v2.re-frame.core/reg-sub","mranderson047.re-frame.v0v10v2.re-frame.subs/reg-sub","mranderson047.re-frame.v0v10v2.re-frame.core/subscribe","mranderson047.re-frame.v0v10v2.re-frame.subs/subscribe","mranderson047.re-frame.v0v10v2.re-frame.core/clear-sub","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.registrar/clear-handlers","mranderson047.re-frame.v0v10v2.re-frame.subs/kind","mranderson047.re-frame.v0v10v2.re-frame.core/clear-subscription-cache!","mranderson047.re-frame.v0v10v2.re-frame.subs/clear-subscription-cache!","mranderson047.re-frame.v0v10v2.re-frame.core/reg-sub-raw","query-id","handler-fn","mranderson047.re-frame.v0v10v2.re-frame.registrar/register-handler","mranderson047.re-frame.v0v10v2.re-frame.core/reg-fx","mranderson047.re-frame.v0v10v2.re-frame.fx/reg-fx","mranderson047.re-frame.v0v10v2.re-frame.core/clear-fx","mranderson047.re-frame.v0v10v2.re-frame.fx/kind","mranderson047.re-frame.v0v10v2.re-frame.core/reg-cofx","mranderson047.re-frame.v0v10v2.re-frame.cofx/reg-cofx","mranderson047.re-frame.v0v10v2.re-frame.core/inject-cofx","mranderson047.re-frame.v0v10v2.re-frame.cofx/inject-cofx","mranderson047.re-frame.v0v10v2.re-frame.core/clear-cofx","mranderson047.re-frame.v0v10v2.re-frame.cofx/kind","var_args","G__19710","mranderson047.re-frame.v0v10v2.re-frame.core/reg-event-db","js/Error","id","handler","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","interceptors","mranderson047.re-frame.v0v10v2.re-frame.events/register","mranderson047.re-frame.v0v10v2.re-frame.cofx/inject-db","mranderson047.re-frame.v0v10v2.re-frame.fx/do-fx","mranderson047.re-frame.v0v10v2.re-frame.std-interceptors/db-handler->interceptor","G__19723","mranderson047.re-frame.v0v10v2.re-frame.core/reg-event-fx","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","mranderson047.re-frame.v0v10v2.re-frame.std-interceptors/fx-handler->interceptor","G__19751","mranderson047.re-frame.v0v10v2.re-frame.core/reg-event-ctx","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3","mranderson047.re-frame.v0v10v2.re-frame.std-interceptors/ctx-handler->interceptor","mranderson047.re-frame.v0v10v2.re-frame.core/clear-event","mranderson047.re-frame.v0v10v2.re-frame.events/kind","mranderson047.re-frame.v0v10v2.re-frame.core/debug","mranderson047.re-frame.v0v10v2.re-frame.std-interceptors/debug","mranderson047.re-frame.v0v10v2.re-frame.core/path","mranderson047.re-frame.v0v10v2.re-frame.std-interceptors/path","mranderson047.re-frame.v0v10v2.re-frame.core/enrich","mranderson047.re-frame.v0v10v2.re-frame.std-interceptors/enrich","mranderson047.re-frame.v0v10v2.re-frame.core/trim-v","mranderson047.re-frame.v0v10v2.re-frame.std-interceptors/trim-v","mranderson047.re-frame.v0v10v2.re-frame.core/after","mranderson047.re-frame.v0v10v2.re-frame.std-interceptors/after","mranderson047.re-frame.v0v10v2.re-frame.core/on-changes","mranderson047.re-frame.v0v10v2.re-frame.std-interceptors/on-changes","mranderson047.re-frame.v0v10v2.re-frame.core/->interceptor","mranderson047.re-frame.v0v10v2.re-frame.interceptor/->interceptor","mranderson047.re-frame.v0v10v2.re-frame.core/get-coeffect","mranderson047.re-frame.v0v10v2.re-frame.interceptor/get-coeffect","mranderson047.re-frame.v0v10v2.re-frame.core/assoc-coeffect","mranderson047.re-frame.v0v10v2.re-frame.interceptor/assoc-coeffect","mranderson047.re-frame.v0v10v2.re-frame.core/get-effect","mranderson047.re-frame.v0v10v2.re-frame.interceptor/get-effect","mranderson047.re-frame.v0v10v2.re-frame.core/assoc-effect","mranderson047.re-frame.v0v10v2.re-frame.interceptor/assoc-effect","mranderson047.re-frame.v0v10v2.re-frame.core/enqueue","mranderson047.re-frame.v0v10v2.re-frame.interceptor/enqueue","mranderson047.re-frame.v0v10v2.re-frame.core/set-loggers!","mranderson047.re-frame.v0v10v2.re-frame.loggers/set-loggers!","mranderson047.re-frame.v0v10v2.re-frame.core/console","mranderson047.re-frame.v0v10v2.re-frame.loggers/console","mranderson047.re-frame.v0v10v2.re-frame.core/make-restore-fn","cljs.core/deref","handlers","mranderson047.re-frame.v0v10v2.re-frame.registrar/kind->id->handler","app-db","mranderson047.re-frame.v0v10v2.re-frame.db/app-db","subs-cache","mranderson047.re-frame.v0v10v2.re-frame.subs/query->reaction","original-subs","cljs.core/set","cljs.core/vals","current-subs","seq__19786","cljs.core/seq","chunk__19787","count__19788","i__19789","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","sub","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.interop/dispose!","cljs.core/reset!","G__19806","mranderson047.re-frame.v0v10v2.re-frame.core/add-post-event-callback","f","mranderson047.re_frame.v0v10v2.re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.router/add-post-event-callback","mranderson047.re-frame.v0v10v2.re-frame.router/event-queue","mranderson047.re-frame.v0v10v2.re-frame.core/remove-post-event-callback","mranderson047.re-frame.v0v10v2.re-frame.router/remove-post-event-callback","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","mranderson047.re-frame.v0v10v2.re-frame.core/register-handler","seq19808","self__4519__auto__","args","G__19809","G__19810","G__19811","G__19812","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.core/register-sub","seq19813","G__19814","G__19815","G__19816","G__19817"]}