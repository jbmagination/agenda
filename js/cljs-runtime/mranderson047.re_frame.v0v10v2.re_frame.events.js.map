{"version":3,"sources":["mranderson047/re_frame/v0v10v2/re_frame/events.cljc"],"sourcesContent":["(ns mranderson047.re-frame.v0v10v2.re-frame.events\n  (:require [mranderson047.re-frame.v0v10v2.re-frame.db          :refer [app-db]]\n            [mranderson047.re-frame.v0v10v2.re-frame.utils       :refer [first-in-vector]]\n            [mranderson047.re-frame.v0v10v2.re-frame.interop     :refer [empty-queue debug-enabled?]]\n            [mranderson047.re-frame.v0v10v2.re-frame.registrar   :refer [get-handler register-handler]]\n            [mranderson047.re-frame.v0v10v2.re-frame.loggers     :refer [console]]\n            [mranderson047.re-frame.v0v10v2.re-frame.interceptor :as  interceptor]\n            [mranderson047.re-frame.v0v10v2.re-frame.trace       :as trace :include-macros true]))\n\n\n(def kind :event)\n(assert (mranderson047.re-frame.v0v10v2.re-frame.registrar/kinds kind))\n\n(defn- flatten-and-remove-nils\n  \"`interceptors` might have nested collections, and contain nil elements.\n  return a flat collection, with all nils removed.\n  This function is 9/10 about giving good error messages.\"\n  [id interceptors]\n  (let [make-chain  #(->> % flatten (remove nil?))]\n    (if-not debug-enabled?\n      (make-chain interceptors)\n      (do    ;; do a whole lot of development time checks\n        (when-not (coll? interceptors)\n          (console :error \"re-frame: when registering \" id \", expected a collection of interceptors, got: \" interceptors))\n        (let [chain (make-chain interceptors)]\n          (when (empty? chain)\n            (console :error \"re-frame: when registering \" id \", given an empty interceptor chain\"))\n          (when-let [not-i (first (remove interceptor/interceptor? chain))]\n            (if (fn? not-i)\n              (console :error \"re-frame: when registering \" id \", got a function instead of an interceptor. Did you provide old style middleware by mistake? Got: \" not-i)\n              (console :error \"re-frame: when registering \" id \", expected interceptors, but got: \" not-i)))\n          chain)))))\n\n\n(defn register\n  \"Associate the given event `id` with the given collection of `interceptors`.\n\n   `interceptors` may contain nested collections and there may be nils\n   at any level,so process this structure into a simple, nil-less vector\n   before registration.\n\n   Typically, an `event handler` will be at the end of the chain (wrapped\n   in an interceptor).\"\n  [id interceptors]\n  (register-handler kind id (flatten-and-remove-nils id interceptors)))\n\n\n\n;; -- handle event --------------------------------------------------------------------------------\n\n(def ^:dynamic *handling* nil)    ;; remember what event we are currently handling\n\n(defn handle\n  \"Given an event vector `event-v`, look up the associated interceptor chain, and execute it.\"\n  [event-v]\n  (let [event-id  (first-in-vector event-v)]\n    (if-let [interceptors  (get-handler kind event-id true)]\n      (if *handling*\n        (console :error \"re-frame: while handling \\\"\" *handling* \"\\\", dispatch-sync was called for \\\"\" event-v \"\\\". You can't call dispatch-sync within an event handler.\")\n        (binding [*handling*  event-v]\n          (trace/with-trace {:operation event-id\n                             :op-type   kind\n                             :tags      {:event event-v}}\n            (interceptor/execute event-v interceptors)))))))\n\n\n"],"mappings":";;;;;;;;;AAUA,sDAAA,tDAAKA;AACL,oBAAQ,CAACE,wFAAAA,6IAAAA,vDAAwDF,yHAAAA;AAAjE;AAAA,AAAA,MAAA,KAAAC,MAAA;;AAEA;;;;;yEAAA,zEAAOE,0JAIJC,GAAGC;AAJN,AAKE,iBAAA,WAAAC,xBAAMC;AAAN,2EAA0BC,3EAAQ,2EAAA,kBAAAF,tFAACG,+CAAOC;;AAA1C,AACE,GAAA,EAAQC;AACN,OAACJ,WAAWF;;AACZ,AACE,GAAU,AAACO,sBAAMP;AAAjB;AAAA,AACE,6FAAA,yGAAA,iCAAA,vOAACQ,oOAA6CT,oDAAoDC;;;AACpG,IAAMS,QAAM,AAACP,WAAWF;AAAxB,AACE,GAAM,AAACU,uBAAOD;AAAd,AACE,6FAAA,yGAAA,iCAAA,vOAACD,oOAA6CT;;AADhD;;AAEA,IAAAY,2BAAiB,AAACE,gBAAM,AAACT,+CAAOU,uEAAyBL;AAAzD,AAAA,oBAAAE;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AACE,GAAI,AAACG,oBAAIH;AACP,6FAAA,yGAAA,iCAAA,vOAACJ,oOAA6CT,wGAAwGa;;AACtJ,6FAAA,yGAAA,iCAAA,vOAACJ,oOAA6CT,wCAAwCa;;;AAH1F;;AAIAH;;;AAGV;;;;;;;;;;0DAAA,1DAAMO,4HASHjB,GAAGC;AATN,AAUE,OAACiB,mEAAiBtB,oDAAKI,GAAG,AAACD,uEAAwBC,GAAGC;;AAMxD,sEAAA,tEAAekB;AAEf;;;wDAAA,xDAAMC,wHAEHC;AAFH,AAGE,IAAMC,WAAU,AAACC,8DAAgBF;AAAjC,AACE,IAAAG,qBAAuB,yJAAA,zJAACC,4FAAY7B,oDAAK0B;AAAzC,AAAA,oBAAAE;AAAA,mBAAAA,fAASvB;AAAT,AACE,oBAAIkB;AACF,oGAAA,yGAAA,kGAAA,8CAAA,tVAACV,oOAA6CU,0GAAiDE;;AAC/F,IAAAK,4BAAUP;AAAV,AAAA,AAAUA,sEAAYE;;AAAtB,IAAA,AACE,GAAA,AAAAM;AAAA,IAAAC,iCAAAC;AAAA,AAAA,AAAAA,0EAAA,AAAAC,0DAAA,2CAAA,yEAAA,gHAAA,qDAAA,2CAAA,zNAA8BR,qEACA1B,0MACQyB;;AAFtC,IAAA,AAAA,IAAA,AAGE,OAACsC,4DAAoBtC,QAAQpB;UAH/B,AAAA,GAAA,AAAA0B;AAAA,AAAA,IAAAI,2BAAA,AAAAC;IAAAC,gCAAA,CAAAF,2BAAA,AAAA,qFAAAF;AAAA,AAAA,IAAAK,mBAAA,AAAAC,cAAA,AAAAC,gBAAAC;IAAAC,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;IAAAE,yBAAA,AAAAC,4CAAAF,iBAAA,IAAA;IAAAG,0BAAA,AAAAD,4CAAAF,iBAAA,IAAA;AAAA,AAAA,AAAA,IAAA,AAAA,IAAAI,iBAAA,mFAAA,AAAAC,qDAAAjB,wEAAA,6DAAAI,gFAAA,mDAAA,AAAAD;AAAA,AAAA,CAAAY,wDAAAA,sDAAAC,kBAAAD,kCAAAC;gBAAA,GAAA,CAAAE,kBAAAC;AAAA,IAAAC,yBAAAF;AAAA,AAAA,AAAAtC,6FAAA,yGAAA,6BAAAiC,uBAAA,gBAAAb,wEAAAoB;;AAAA,AAAA,MAAAF;;;;AAAA;AAAA,eAAAb;eAAAI;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA5B,2BAAA,AAAAuB,cAAAD;AAAA,AAAA,GAAAtB;AAAA,AAAA,IAAAsB,uBAAAtB;AAAA,AAAA,GAAA,AAAAsC,6BAAAhB;AAAA,IAAAiB,wBAAA,AAAAC,sBAAAlB;AAAA,AAAA,eAAA,AAAAmB,qBAAAnB;eAAAiB;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,mBAAA,AAAAzC,gBAAAoB;IAAAQ,yBAAA,AAAAC,4CAAAY,iBAAA,IAAA;IAAAX,0BAAA,AAAAD,4CAAAY,iBAAA,IAAA;AAAA,AAAA,AAAA,IAAA,AAAA,IAAAC,iBAAA,mFAAA,AAAAV,qDAAAjB,wEAAA,6DAAAI,gFAAA,mDAAA,AAAAD;AAAA,AAAA,CAAAY,wDAAAA,sDAAAY,kBAAAZ,kCAAAY;gBAAA,GAAA,CAAAC,kBAAAT;AAAA,IAAAC,yBAAAQ;AAAA,AAAA,AAAAhD,6FAAA,yGAAA,6BAAAiC,uBAAA,gBAAAb,wEAAAoB;;AAAA,AAAA,MAAAQ;;;;AAAA;AAAA,eAAA,AAAAC,eAAAxB;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAAA;WAAA,AAAA,AAAAL,0EAAAD;;AAAA,AAGE,OAAC+B,4DAAoBtC,QAAQpB;;UAJjC,AAAA,sEAAAyB,tEAAUP;;;AAHd","names":["mranderson047.re-frame.v0v10v2.re-frame.events/kind","js/Error","mranderson047.re-frame.v0v10v2.re-frame.registrar/kinds","mranderson047.re-frame.v0v10v2.re-frame.events/flatten-and-remove-nils","id","interceptors","p1__19272#","make-chain","cljs.core/flatten","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","mranderson047.re-frame.v0v10v2.re-frame.interop/debug-enabled?","cljs.core/coll?","mranderson047.re_frame.v0v10v2.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","chain","cljs.core/empty?","temp__5457__auto__","not-i","cljs.core/first","mranderson047.re-frame.v0v10v2.re-frame.interceptor/interceptor?","cljs.core/fn?","mranderson047.re-frame.v0v10v2.re-frame.events/register","mranderson047.re-frame.v0v10v2.re-frame.registrar/register-handler","mranderson047.re-frame.v0v10v2.re-frame.events/*handling*","mranderson047.re-frame.v0v10v2.re-frame.events/handle","event-v","event-id","mranderson047.re-frame.v0v10v2.re-frame.utils/first-in-vector","temp__5455__auto__","mranderson047.re_frame.v0v10v2.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","*handling*19286","mranderson047.re-frame.v0v10v2.re-frame.trace/is-trace-enabled?","*current-trace*19287","mranderson047.re-frame.v0v10v2.re-frame.trace/*current-trace*","mranderson047.re-frame.v0v10v2.re-frame.trace/start-trace","end__19177__auto__","mranderson047.re-frame.v0v10v2.re-frame.interop/now","duration__19178__auto__","seq__19288","cljs.core/seq","cljs.core/deref","mranderson047.re-frame.v0v10v2.re-frame.trace/trace-cbs","chunk__19289","count__19290","i__19291","vec__19293","k__19179__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cb__19180__auto__","G__19297","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","e19296","java/lang.Exception","e__19181__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__19299","G__19305","e19303","cljs.core/next","mranderson047.re-frame.v0v10v2.re-frame.interceptor/execute"]}