{"version":3,"sources":["mranderson047/re_frame/v0v10v2/re_frame/fx.cljc"],"sourcesContent":["(ns mranderson047.re-frame.v0v10v2.re-frame.fx\n  (:require\n    [mranderson047.re-frame.v0v10v2.re-frame.router      :as router]\n    [mranderson047.re-frame.v0v10v2.re-frame.db          :refer [app-db]]\n    [mranderson047.re-frame.v0v10v2.re-frame.interceptor :refer [->interceptor]]\n    [mranderson047.re-frame.v0v10v2.re-frame.interop     :refer [set-timeout!]]\n    [mranderson047.re-frame.v0v10v2.re-frame.events      :as events]\n    [mranderson047.re-frame.v0v10v2.re-frame.registrar   :refer [get-handler clear-handlers register-handler]]\n    [mranderson047.re-frame.v0v10v2.re-frame.loggers     :refer [console]]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :fx)\n(assert (mranderson047.re-frame.v0v10v2.re-frame.registrar/kinds kind))\n\n(defn reg-fx\n  \"Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`.\"\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.\"\n  (->interceptor\n    :id :do-fx\n    :after (fn do-fx-after\n             [context]\n             (doseq [[effect-key effect-value] (:effects context)]\n               (if-let [effect-fn (get-handler kind effect-key false)]\n                 (effect-fn effect-value)\n                 (console :error \"re-frame: no handler registered for effect: \\\"\" effect-key \"\\\". Ignoring.\"))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n(reg-fx\n  :dispatch-later\n  (fn [value]\n    (doseq [{:keys [ms dispatch] :as effect} value]\n        (if (or (empty? dispatch) (not (number? ms)))\n          (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\n          (set-timeout! #(router/dispatch dispatch) ms)))))\n\n\n;; :dispatch\n;;\n;; `dispatch` one event. Excepts a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n\n(reg-fx\n  :dispatch\n  (fn [value]\n    (if-not (vector? value)\n      (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\n      (router/dispatch value))))\n\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(reg-fx\n  :dispatch-n\n  (fn [value]\n    (if-not (sequential? value)\n      (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, got got:\" value)\n      (doseq [event (remove nil? value)] (router/dispatch event)))))\n\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n(reg-fx\n  :deregister-event-handler\n  (fn [value]\n    (let [clear-event (partial clear-handlers events/kind)]\n      (if (sequential? value)\n        (doseq [event value] (clear-event event))\n        (clear-event value)))))\n\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(reg-fx\n  :db\n  (fn [value]\n    (if-not (identical? @app-db value)\n      (reset! app-db value))))\n\n"],"mappings":"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","names":["mranderson047.re-frame.v0v10v2.re-frame.fx/kind","js/Error","mranderson047.re-frame.v0v10v2.re-frame.registrar/kinds","mranderson047.re-frame.v0v10v2.re-frame.fx/reg-fx","id","handler","mranderson047.re-frame.v0v10v2.re-frame.registrar/register-handler","mranderson047.re-frame.v0v10v2.re-frame.fx/do-fx","mranderson047.re_frame.v0v10v2.re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic","context","seq__19558","cljs.core/seq","chunk__19559","count__19560","i__19561","vec__19563","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__19566","cljs.core/first","cljs.core/next","effect-key","effect-value","temp__5455__auto__","effect-fn","mranderson047.re_frame.v0v10v2.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","mranderson047.re_frame.v0v10v2.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","value","seq__19570","chunk__19571","count__19572","i__19573","map__19575","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__19580","ms","dispatch","effect","cljs.core/empty?","mranderson047.re-frame.v0v10v2.re-frame.interop/set-timeout!","mranderson047.re-frame.v0v10v2.re-frame.router/dispatch","cljs.core/vector?","cljs.core/sequential?","seq__19593","chunk__19594","count__19595","i__19596","event","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","clear-event","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.registrar/clear-handlers","mranderson047.re-frame.v0v10v2.re-frame.events/kind","seq__19618","chunk__19619","count__19620","i__19621","cljs.core/deref","mranderson047.re-frame.v0v10v2.re-frame.db/app-db","cljs.core/reset!"]}