{"version":3,"sources":["mranderson047/re_frame/v0v10v2/re_frame/router.cljc"],"sourcesContent":["(ns mranderson047.re-frame.v0v10v2.re-frame.router\n  (:require [mranderson047.re-frame.v0v10v2.re-frame.events  :refer [handle]]\n            [mranderson047.re-frame.v0v10v2.re-frame.interop :refer [after-render empty-queue next-tick]]\n            [mranderson047.re-frame.v0v10v2.re-frame.loggers :refer [console]]\n            [mranderson047.re-frame.v0v10v2.re-frame.trace   :as trace :include-macros true]))\n\n\n;; -- Router Loop ------------------------------------------------------------\n;;\n;; A call to \"re-frame.core/dispatch\" places an event on a queue for processing.\n;; A short time later, the handler registered to handle this event will be run.\n;; What follows is the implementation of this process.\n;;\n;; The task is to process queued events in a perpetual loop, one after\n;; the other, FIFO, calling the registered event-handler for each, being idle when\n;; there are no events, and firing up when one arrives.\n;;\n;; But browsers only have a single thread of control and we must be\n;; careful to not hog the CPU. When processing events one after another, we\n;; must regularly hand back control to the browser, so it can redraw, process\n;; websockets, etc. But not too regularly! If we are in a de-focused browser\n;; tab, our app will be CPU throttled. Each time we get back control, we have\n;; to process all queued events, or else something like a bursty websocket\n;; (producing events) might overwhelm the queue. So there's a balance.\n;;\n;; The processing/handling of an event happens \"asynchronously\" sometime after\n;; that event was enqueued via \"dispatch\". The original implementation of this router loop\n;; used `core.async`. As a result, it was fairly simple, and it mostly worked,\n;; but it did not give enough control. So now we hand-roll our own,\n;; finite-state-machine and all.\n;;\n;; In what follows, the strategy is this:\n;;   - maintain a FIFO queue of `dispatched` events.\n;;   - when a new event arrives, \"schedule\" processing of this queue using\n;;     goog.async.nextTick, which means it will happen \"very soon\".\n;;   - when processing events, one after the other, do ALL the currently\n;;     queued events. Don't stop. Don't yield to the browser. Hog that CPU.\n;;   - but if any new events are dispatched during this cycle of processing,\n;;     don't do them immediately. Leave them queued. Yield first to the browser,\n;;     and do these new events in the next processing cycle. That way we drain\n;;     the queue up to a point, but we never hog the CPU forever. In\n;;     particular, we handle the case where handling one event will beget\n;;     another event. The freshly begotten event will be handled next cycle,\n;;     with yielding in-between.\n;;   - In some cases, an event should not be handled until after the GUI has been\n;;     updated, i.e., after the next Reagent animation frame. In such a case,\n;;     the event should be dispatched with :flush-dom metadata like this:\n;;       (dispatch ^:flush-dom [:event-id other params])\n;;     Such an event will temporarily block all further processing because\n;;     events are processed sequentially: we handle one event completely\n;;     before we handle the ones behind it.\n;;\n;; Implementation notes:\n;;   - queue processing can be in a number of states: scheduled, running, paused\n;;     etc. So it is modeled as a Finite State Machine.\n;;     See \"-fsm-trigger\" (below) for the states and transitions.\n;;   - the scheduling is done via \"goog.async.nextTick\" which is pretty quick\n;;   - when the event has :flush-dom metadata we schedule via\n;;       \"reagent.core.after-render\"\n;;     which will run event processing after the next Reagent animation frame.\n;;\n\n;; Events can have metadata which says to pause event processing.\n;; event metadata -> \"run later\" functions\n(def later-fns\n  {:flush-dom (fn [f] (after-render #(next-tick f)))   ;; one tick after the end of the next annimation frame\n   :yield     next-tick})               ;; almost immediately\n\n\n;; Event Queue Abstraction\n(defprotocol IEventQueue\n\n  ;; -- API\n  (push [this event])\n  (add-post-event-callback [this id callack])\n  (remove-post-event-callback [this f])\n\n  ;; -- Implementation via a Finite State Machine\n  (-fsm-trigger [this trigger arg])\n\n  ;; -- Finite State Machine actions\n  (-add-event [this event])\n  (-process-1st-event-in-queue [this])\n  (-run-next-tick [this])\n  (-run-queue [this])\n  (-exception [this ex])\n  (-pause [this later-fn])\n  (-resume [this])\n  (-call-post-event-callbacks [this event]))\n\n\n;; Concrete implementation of IEventQueue\n(deftype EventQueue [#?(:cljs ^:mutable fsm-state               :clj ^:volatile-mutable fsm-state)\n                     #?(:cljs ^:mutable queue                   :clj ^:volatile-mutable queue)\n                     #?(:cljs ^:mutable post-event-callback-fns :clj ^:volatile-mutable post-event-callback-fns)]\n  IEventQueue\n\n  ;; -- API ------------------------------------------------------------------\n\n  (push [this event]         ;; presumably called by dispatch\n    (-fsm-trigger this :add-event event))\n\n  ;; register a callback function which will be called after each event is processed\n  (add-post-event-callback [_ id callback-fn]\n    (if (contains? post-event-callback-fns id)\n      (console :warn \"re-frame: overwriting existing post event call back with id:\" id))\n    (->> (assoc post-event-callback-fns id callback-fn)\n         (set! post-event-callback-fns)))\n\n  (remove-post-event-callback [_ id]\n    (if-not (contains? post-event-callback-fns id)\n      (console :warn \"re-frame: could not remove post event call back with id:\" id)\n      (->> (dissoc post-event-callback-fns id)\n           (set! post-event-callback-fns))))\n\n\n  ;; -- FSM Implementation ---------------------------------------------------\n\n  (-fsm-trigger\n    [this trigger arg]\n\n    ;; The following \"case\" implements the Finite State Machine.\n    ;; Given a \"trigger\", and the existing FSM state, it computes the\n    ;; new FSM state and the transition action (function).\n\n    (trace/with-trace {:op-type ::fsm-trigger}\n      (let [[new-fsm-state action-fn]\n            (case [fsm-state trigger]\n\n              ;; You should read the following \"case\" as:\n              ;; [current-FSM-state trigger] -> [new-FSM-state action-fn]\n              ;;\n              ;; So, for example, the next line should be interpreted as:\n              ;; if you are in state \":idle\" and a trigger \":add-event\"\n              ;; happens, then move the FSM to state \":scheduled\" and execute\n              ;; that two-part \"do\" function.\n              [:idle :add-event] [:scheduled #(do (-add-event this arg)\n                                                  (-run-next-tick this))]\n\n              ;; State: :scheduled  (the queue is scheduled to run, soon)\n              [:scheduled :add-event] [:scheduled #(-add-event this arg)]\n              [:scheduled :run-queue] [:running #(-run-queue this)]\n\n              ;; State: :running (the queue is being processed one event after another)\n              [:running :add-event] [:running #(-add-event this arg)]\n              [:running :pause] [:paused #(-pause this arg)]\n              [:running :exception] [:idle #(-exception this arg)]\n              [:running :finish-run] (if (empty? queue)     ;; FSM guard\n                                       [:idle]\n                                       [:scheduled #(-run-next-tick this)])\n\n              ;; State: :paused (:flush-dom metadata on an event has caused a temporary pause in processing)\n              [:paused :add-event] [:paused #(-add-event this arg)]\n              [:paused :resume] [:running #(-resume this)]\n\n              (throw (ex-info (str \"re-frame: router state transition not found. \" fsm-state \" \" trigger)\n                              {:fsm-state fsm-state, :trigger trigger})))]\n\n        ;; The \"case\" above computed both the new FSM state, and the action. Now, make it happen.\n\n        (trace/merge-trace! {:operation [fsm-state trigger]\n                             :tags      {:current-state fsm-state\n                                         :new-state     new-fsm-state}})\n        (set! fsm-state new-fsm-state)\n        (when action-fn (action-fn)))))\n\n  (-add-event\n    [_ event]\n    (set! queue (conj queue event)))\n\n  (-process-1st-event-in-queue\n    [this]\n    (let [event-v (peek queue)]\n      (try\n        (handle event-v)\n        (set! queue (pop queue))\n        (-call-post-event-callbacks this event-v)\n        (catch #?(:cljs :default :clj Exception) ex\n          (-fsm-trigger this :exception ex)))))\n\n  (-run-next-tick\n    [this]\n    (next-tick #(-fsm-trigger this :run-queue nil)))\n\n  ;; Process all the events currently in the queue, but not any new ones.\n  ;; Be aware that events might have metadata which will pause processing.\n  (-run-queue\n    [this]\n    (loop [n (count queue)]\n      (if (zero? n)\n        (-fsm-trigger this :finish-run nil)\n        (if-let [later-fn (some later-fns (-> queue peek meta keys))]  ;; any metadata which causes pausing?\n          (-fsm-trigger this :pause later-fn)\n          (do (-process-1st-event-in-queue this)\n              (recur (dec n)))))))\n\n  (-exception\n    [_ ex]\n    (set! queue empty-queue) ;; purge the queue\n    (throw ex))\n\n  (-pause\n    [this later-fn]\n    (later-fn #(-fsm-trigger this :resume nil)))\n\n  (-call-post-event-callbacks\n    [_ event-v]\n    (doseq [callback (vals post-event-callback-fns)]\n      (callback event-v queue)))\n\n  (-resume\n    [this]\n    (-process-1st-event-in-queue this)  ;; do the event which paused processing\n    (-run-queue this)))                 ;; do the rest of the queued events\n\n\n;; ---------------------------------------------------------------------------\n;; Event Queue\n;; When \"dispatch\" is called, the event is added into this event queue.  Later,\n;;  the queue will \"run\" and the event will be \"handled\" by the registered function.\n;;\n(def event-queue (->EventQueue :idle empty-queue {}))\n\n\n;; ---------------------------------------------------------------------------\n;; Dispatching\n;;\n\n(defn dispatch\n  \"Enqueue `event` for processing by event handling machinery.\n\n  `event` is a vector of length >= 1. The 1st element identifies the kind of event.\n\n  Note: the event handler is not run immediately - it is not run\n  synchronously. It will likely be run 'very soon', although it may be\n  added to the end of a FIFO queue which already contain events.\n\n  Usage:\n     (dispatch [:order-pizza {:supreme 2 :meatlovers 1 :veg 1})\"\n  [event]\n  (if (nil? event)\n      (throw (ex-info \"re-frame: you called \\\"dispatch\\\" without an event vector.\" {}))\n      (push event-queue event))\n  nil)                                           ;; Ensure nil return. See https://github.com/Day8/re-frame/wiki/Beware-Returning-False\n\n\n(defn dispatch-sync\n  \"Synchronously (immediately) process `event`. Do not queue.\n\n  Generally, don't use this. Instead use `dispatch`. It is an error\n  to use `dispatch-sync` within an event handler.\n\n  Useful when any delay in processing is a problem:\n     1. the `:on-change` handler of a text field where we are expecting fast typing.\n     2  when initialising your app - see 'main' in todomvc examples\n     3. in a unit test where we don't want the action 'later'\n\n  Usage:\n     (dispatch-sync [:sing :falsetto 634])\"\n  [event-v]\n  (handle event-v)\n  (-call-post-event-callbacks event-queue event-v)  ;; slightly ugly hack. Run the registered post event callbacks.\n  nil)                                              ;; Ensure nil return. See https://github.com/Day8/re-frame/wiki/Beware-Returning-False\n"],"mappings":";;;;;;AAgEA,2DAAA,2CAAA,tGAAKA,qKACS,WAAKC;AAAL,AAAQ,IAAAC,WAAA;AAAA,AAAe,QAACE,0FAAAA,6FAAAA,LAAUH,yEAAAA;;AAA1B,AAAA,gMAAAC,mFAAAA,3QAACC,6FAAAA,uGAAAA;GADvB,sDAEcC;AAId,AAAA;AAAA;;;6DAAA,7DAAaiB;;AAAb,sDAAA,tDAGGC,oHAAMC,MAAKC;AAHd,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,iFAAA,zGAGSD,wBAAAA;AAHT,OAGSA,8EAAAA,MAAKC;;AAHd,IAAAnB,kBAAA,EAAA,UAAA,OAAA,hBAGSkB,qBAAAA;IAHTjB,kBAAA,CAAAC,oDAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,6DAAAA,fAGSiB,yCAAAA,nCAAKC,yCAAAA;;AAHd,IAAAlB,sBAAA,CAAAC,oDAAA;AAAA,AAAA,GAAA,EAAA,CAAAD,uBAAA;AAAA,QAAAA,oDAAAA,iEAAAA,fAGSiB,6CAAAA,vCAAKC,6CAAAA;;AAHd,MAAA,AAAAf,2BAAA,mBAGSc;;;;;;AAHT,yEAAA,zEAIGE,0JAAyBF,MAAKG,GAAGC;AAJpC,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,oGAAA,5HAI4BJ,wBAAAA;AAJ5B,OAI4BA,iGAAAA,MAAKG,GAAGC;;AAJpC,IAAAtB,kBAAA,EAAA,UAAA,OAAA,hBAI4BkB,qBAAAA;IAJ5BjB,kBAAA,CAAAI,uEAAA,AAAAF,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,kEAAAA,pBAI4BiB,8CAAAA,xCAAKG,8CAAAA,3CAAGC,8CAAAA;;AAJpC,IAAArB,sBAAA,CAAAI,uEAAA;AAAA,AAAA,GAAA,EAAA,CAAAJ,uBAAA;AAAA,QAAAA,oDAAAA,sEAAAA,pBAI4BiB,kDAAAA,5CAAKG,kDAAAA,/CAAGC,kDAAAA;;AAJpC,MAAA,AAAAlB,2BAAA,sCAI4Bc;;;;;;AAJ5B,4EAAA,5EAKGK,gKAA4BL,MAAKtB;AALpC,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,uGAAA,/HAK+BsB,wBAAAA;AAL/B,OAK+BA,oGAAAA,MAAKtB;;AALpC,IAAAI,kBAAA,EAAA,UAAA,OAAA,hBAK+BkB,qBAAAA;IAL/BjB,kBAAA,CAAAK,0EAAA,AAAAH,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,yDAAAA,XAK+BiB,qCAAAA,/BAAKtB,qCAAAA;;AALpC,IAAAK,sBAAA,CAAAK,0EAAA;AAAA,AAAA,GAAA,EAAA,CAAAL,uBAAA;AAAA,QAAAA,oDAAAA,6DAAAA,XAK+BiB,yCAAAA,nCAAKtB,yCAAAA;;AALpC,MAAA,AAAAQ,2BAAA,yCAK+Bc;;;;;;AAL/B,8DAAA,9DAQGM,oIAAcN,MAAKO,QAAQC;AAR9B,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,yFAAA,jHAQiBR,wBAAAA;AARjB,OAQiBA,sFAAAA,MAAKO,QAAQC;;AAR9B,IAAA1B,kBAAA,EAAA,UAAA,OAAA,hBAQiBkB,qBAAAA;IARjBjB,kBAAA,CAAAM,4DAAA,AAAAJ,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,mEAAAA,rBAQiBiB,+CAAAA,zCAAKO,+CAAAA,vCAAQC,+CAAAA;;AAR9B,IAAAzB,sBAAA,CAAAM,4DAAA;AAAA,AAAA,GAAA,EAAA,CAAAN,uBAAA;AAAA,QAAAA,oDAAAA,uEAAAA,rBAQiBiB,mDAAAA,7CAAKO,mDAAAA,3CAAQC,mDAAAA;;AAR9B,MAAA,AAAAtB,2BAAA,2BAQiBc;;;;;;AARjB,4DAAA,5DAWGS,gIAAYT,MAAKC;AAXpB,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,uFAAA,/GAWeD,wBAAAA;AAXf,OAWeA,oFAAAA,MAAKC;;AAXpB,IAAAnB,kBAAA,EAAA,UAAA,OAAA,hBAWekB,qBAAAA;IAXfjB,kBAAA,CAAAO,0DAAA,AAAAL,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,6DAAAA,fAWeiB,yCAAAA,nCAAKC,yCAAAA;;AAXpB,IAAAlB,sBAAA,CAAAO,0DAAA;AAAA,AAAA,GAAA,EAAA,CAAAP,uBAAA;AAAA,QAAAA,oDAAAA,iEAAAA,fAWeiB,6CAAAA,vCAAKC,6CAAAA;;AAXpB,MAAA,AAAAf,2BAAA,yBAWec;;;;;;AAXf,6EAAA,7EAYGU,kKAA6BV;AAZhC,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,wGAAA,hIAYgCA,wBAAAA;AAZhC,OAYgCA,qGAAAA;;AAZhC,IAAAlB,kBAAA,EAAA,UAAA,OAAA,hBAYgCkB,qBAAAA;IAZhCjB,kBAAA,CAAAQ,2EAAA,AAAAN,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAYgCiB,mCAAAA;;AAZhC,IAAAjB,sBAAA,CAAAQ,2EAAA;AAAA,AAAA,GAAA,EAAA,CAAAR,uBAAA;AAAA,QAAAA,oDAAAA,2DAAAA,TAYgCiB,uCAAAA;;AAZhC,MAAA,AAAAd,2BAAA,0CAYgCc;;;;;;AAZhC,gEAAA,hEAaGW,wIAAgBX;AAbnB,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,2FAAA,nHAamBA,wBAAAA;AAbnB,OAamBA,wFAAAA;;AAbnB,IAAAlB,kBAAA,EAAA,UAAA,OAAA,hBAamBkB,qBAAAA;IAbnBjB,kBAAA,CAAAS,8DAAA,AAAAP,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAamBiB,mCAAAA;;AAbnB,IAAAjB,sBAAA,CAAAS,8DAAA;AAAA,AAAA,GAAA,EAAA,CAAAT,uBAAA;AAAA,QAAAA,oDAAAA,2DAAAA,TAamBiB,uCAAAA;;AAbnB,MAAA,AAAAd,2BAAA,6BAamBc;;;;;;AAbnB,4DAAA,5DAcGY,gIAAYZ;AAdf,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,uFAAA,/GAceA,wBAAAA;AAdf,OAceA,oFAAAA;;AAdf,IAAAlB,kBAAA,EAAA,UAAA,OAAA,hBAcekB,qBAAAA;IAdfjB,kBAAA,CAAAU,0DAAA,AAAAR,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAceiB,mCAAAA;;AAdf,IAAAjB,sBAAA,CAAAU,0DAAA;AAAA,AAAA,GAAA,EAAA,CAAAV,uBAAA;AAAA,QAAAA,oDAAAA,2DAAAA,TAceiB,uCAAAA;;AAdf,MAAA,AAAAd,2BAAA,yBAcec;;;;;;AAdf,4DAAA,5DAeGa,gIAAYb,MAAKc;AAfpB,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,uFAAA,/GAeed,wBAAAA;AAff,OAeeA,oFAAAA,MAAKc;;AAfpB,IAAAhC,kBAAA,EAAA,UAAA,OAAA,hBAeekB,qBAAAA;IAffjB,kBAAA,CAAAW,0DAAA,AAAAT,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,0DAAAA,ZAeeiB,sCAAAA,hCAAKc,sCAAAA;;AAfpB,IAAA/B,sBAAA,CAAAW,0DAAA;AAAA,AAAA,GAAA,EAAA,CAAAX,uBAAA;AAAA,QAAAA,oDAAAA,8DAAAA,ZAeeiB,0CAAAA,pCAAKc,0CAAAA;;AAfpB,MAAA,AAAA5B,2BAAA,yBAeec;;;;;;AAff,wDAAA,xDAgBGe,wHAAQf,MAAKgB;AAhBhB,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,mFAAA,3GAgBWhB,wBAAAA;AAhBX,OAgBWA,gFAAAA,MAAKgB;;AAhBhB,IAAAlC,kBAAA,EAAA,UAAA,OAAA,hBAgBWkB,qBAAAA;IAhBXjB,kBAAA,CAAAY,sDAAA,AAAAV,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,gEAAAA,lBAgBWiB,4CAAAA,tCAAKgB,4CAAAA;;AAhBhB,IAAAjC,sBAAA,CAAAY,sDAAA;AAAA,AAAA,GAAA,EAAA,CAAAZ,uBAAA;AAAA,QAAAA,oDAAAA,oEAAAA,lBAgBWiB,gDAAAA,1CAAKgB,gDAAAA;;AAhBhB,MAAA,AAAA9B,2BAAA,qBAgBWc;;;;;;AAhBX,yDAAA,zDAiBGiB,0HAASjB;AAjBZ,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,oFAAA,5GAiBYA,wBAAAA;AAjBZ,OAiBYA,iFAAAA;;AAjBZ,IAAAlB,kBAAA,EAAA,UAAA,OAAA,hBAiBYkB,qBAAAA;IAjBZjB,kBAAA,CAAAa,uDAAA,AAAAX,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,uDAAAA,TAiBYiB,mCAAAA;;AAjBZ,IAAAjB,sBAAA,CAAAa,uDAAA;AAAA,AAAA,GAAA,EAAA,CAAAb,uBAAA;AAAA,QAAAA,oDAAAA,2DAAAA,TAiBYiB,uCAAAA;;AAjBZ,MAAA,AAAAd,2BAAA,sBAiBYc;;;;;;AAjBZ,4EAAA,5EAkBGkB,gKAA4BlB,MAAKC;AAlBpC,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,uGAAA,/HAkB+BD,wBAAAA;AAlB/B,OAkB+BA,oGAAAA,MAAKC;;AAlBpC,IAAAnB,kBAAA,EAAA,UAAA,OAAA,hBAkB+BkB,qBAAAA;IAlB/BjB,kBAAA,CAAAc,0EAAA,AAAAZ,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,6DAAAA,fAkB+BiB,yCAAAA,nCAAKC,yCAAAA;;AAlBpC,IAAAlB,sBAAA,CAAAc,0EAAA;AAAA,AAAA,GAAA,EAAA,CAAAd,uBAAA;AAAA,QAAAA,oDAAAA,iEAAAA,fAkB+BiB,6CAAAA,vCAAKC,6CAAAA;;AAlBpC,MAAA,AAAAf,2BAAA,yCAkB+Bc;;;;;;AAlB/B,AAsBA,AAAA;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,kIAAAmB,lIAASK;;AAAT,AAAA,AAAA,oJAAA,pJAASA,+JA+FJxB;;AA/FL,AAAA,gBAAA,ZA+FKA;AA/FL,AAgGI,IAAOyF,IAAE,AAAC1B,gBAAMpC;;AAAhB,AACE,GAAI,OAAA,NAAO8D;AACT,sGAAA,gEAAA,/JAAczF;;AACd,IAAA0F,qBAAkB,AAACC,eAAKlH,yDAAU,eAAA,eAAA,eAAIkD,fAAMyD,fAAKQ,fAAKC;AAAtD,AAAA,oBAAAH;AAAA,eAAAA,XAAS1E;AAAT,AACE,sGAAA,/FAAchB,uJAAYgB;;AAC1B,AAAI,AAA6BhB;;AAC7B,eAAO,KAAA,JAAKyF;;;;;;;;;AAtG1B,AAAA,AAAA,oKAAA,pKAASjE,+KAiBsBK,EAAE1B;;AAjBjC,AAAA,YAAA,RAiB+B0B;AAjB/B,AAkBI,GAAA,EAAQ,AAACE,0BAAUH,+BAAwBzB;AACzC,oGAAA,uGAAA,pMAAC6B,+PAAyE7B;;wCACrE,AAAC+B,+CAAON,+BAAwBzB,tHAChC,OAAMyB;;;;AArBjB,AAAA,AAAA,oJAAA,pJAASJ,+JA2EJK,EAAE5B;;AA3EP,AAAA,YAAA,RA2EK4B;AA3EL,AA4EI,OAAMF,eAAM,AAACuD,6CAAKvD,aAAM1B;;;AA5E5B,AAAA,AAAA,iJAAA,jJAASuB,4JAuHJxB;;AAvHL,AAAA,gBAAA,ZAuHKA;AAvHL,AAwHI,AAA6BA;;AAC7B,OAAYA;;;AAzHhB,AAAA,AAAA,8IAAA,9IAASwB,yJAOAxB,MAAKC;;AAPd,AAAA,gBAAA,ZAOSD;AAPT,AAQI,sGAAA,/FAAcA,6JAAgBC;;;AARlC,AAAA,AAAA,wJAAA,xJAASuB,mKAyFJxB;;AAzFL,AAAA,gBAAA,ZAyFKA;AAzFL,AA0FI,IAAAwF,WAAA;;AAAA,AAAY,sGAAA,gEAAA,/JAAcxF;;;AAA1B,AAAA,0LAAAwF,gFAAAA,lQAAC3G,0FAAAA,oGAAAA;;;AA1FL,AAAA,AAAA,sJAAA,tJAAS2C,iKA2BJxB,MAAKO,QAAQC;;AA3BlB,AAAA,gBAAA,ZA2BKR;AA3BL,AAiCI,GAAA,AAAAmC;AAAA,IAAAC,iCAAAC;AAAA,AAAA,AAAAA,0EAAA,AAAAC,0DAAA,2CAAA,4DAAA;;AAAA,IAAA,AAAA,IAAA,AACE,IAAA+B,aACM,iBAAAI,WAAA,mFAAO/C,iBAAUnB;AAAjB,AAAA,GAAA,AAAAmE,6CAAA,mFAAA,sDAAA,sEAAAD;AAAA,0FAAA,8DAAA;;AAAA,AASkC,AAAI,AAAYzE,6FAAKQ;;AACjB,OAAgBR;;;;AAVtD,GAAA,AAAA0E,6CAAA,mFAAA,8DAAA,sEAAAD;AAAA,0FAAA,8DAAA;;AAAA,AAauC,OAAYzE,6FAAKQ;;;;AAbxD,GAAA,AAAAkE,6CAAA,mFAAA,8DAAA,wEAAAD;AAAA,0FAAA,2DAAA;;AAAA,AAcqC,OAAYzE;;;;AAdjD,GAAA,AAAA0E,6CAAA,mFAAA,2DAAA,sEAAAD;AAAA,0FAAA,2DAAA;;AAAA,AAiBmC,OAAYzE,6FAAKQ;;;;AAjBpD,GAAA,AAAAkE,6CAAA,mFAAA,2DAAA,gEAAAD;AAAA,0FAAA,0DAAA;;AAAA,AAkB8B,OAAQzE,yFAAKQ;;;;AAlB3C,GAAA,AAAAkE,6CAAA,mFAAA,2DAAA,uEAAAD;AAAA,0FAAA,sDAAA;;AAAA,AAmBgC,OAAYzE,6FAAKQ;;;;AAnBjD,GAAA,AAAAkE,6CAAA,mFAAA,2DAAA,wEAAAD;AAoByB,GAAI,AAACG,uBAAOjD;AAAZ,0FAAA;;AAAA,0FAAA,8DAAA;;AAAA,AAEe,OAAgB3B;;;;;AAtBxD,GAAA,AAAA0E,6CAAA,mFAAA,0DAAA,sEAAAD;AAAA,0FAAA,0DAAA;;AAAA,AAyBiC,OAAYzE,6FAAKQ;;;;AAzBlD,GAAA,AAAAkE,6CAAA,mFAAA,0DAAA,iEAAAD;AAAA,0FAAA,2DAAA;;AAAA,AA0B+B,OAASzE;;;;AA1BxC,AA4BE,MAAO,kOAAA,2CAAA,gFAAA,7VAAC6E,gDAAQ,CAAA,8GAAA,lBAAqDnD,kEAAcnB,6HACvDmB,2EAAoBnB;;;;;;;;;;;;oBA9BxD,AAAA4C,4CAAAkB,WAAA,IAAA,3EAAOE;gBAAP,AAAApB,4CAAAkB,WAAA,IAAA,vEAAqBG;AAArB,AAkCE,GAAA,AAAArC;AAAA,AAAA,IAAA2C,iCAAA,AAAAC,uGAAA,AAAAC,+CAAA3C,wEAAA,qDAAA4C,gBAAA,AAAA,mFAAA,2CAAA,gEAAA,oHAAA,qDAAA,2CAAA,wFAAA,+FAAA,AAAA/C,+CAAA,2CAAA,gEAAA,oHAAA,qDAAA,2CAAA,wFAAA,6FAAA,31BAAiCR,qiBAAAA,phBAAUnB,qiBAAAA,9WACKmB,qiBAAAA,rdACA6C,qiBAAAA;AAFhD,AAAA,AAAAlC,0EAAAyC;;AAAA;AAAA;;AAGA,AAAMpD,mBAAU6C;;AAChB,oBAAMC;AAAN,AAAgB,QAACA,0CAAAA,4CAAAA;;AAAjB;;UAvCJ,AAAA,GAAA,AAAArC;AAAA,AAAA,IAAAI,2BAAA,AAAAC;IAAAC,gCAAA,CAAAF,2BAAA,AAAA,qFAAAF;AAAA,AAAA,IAAAK,mBAAA,AAAAC,cAAA,AAAAC,gBAAAC;IAAAC,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;IAAAE,yBAAA,AAAAC,4CAAAF,iBAAA,IAAA;IAAAG,0BAAA,AAAAD,4CAAAF,iBAAA,IAAA;AAAA,AAAA,AAAA,IAAA,AAAA,IAAAI,iBAAA,mFAAA,AAAAC,qDAAAjB,wEAAA,6DAAAI,gFAAA,mDAAA,AAAAD;AAAA,AAAA,CAAAY,wDAAAA,sDAAAC,kBAAAD,kCAAAC;gBAAA,GAAA,CAAAE,kBAAAC;AAAA,IAAAC,yBAAAF;AAAA,AAAA,AAAAvB,6FAAA,yGAAA,6BAAAkB,uBAAA,gBAAAb,wEAAAoB;;AAAA,AAAA,MAAAF;;;;AAAA;AAAA,eAAAb;eAAAI;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAU,2BAAA,AAAAf,cAAAD;AAAA,AAAA,GAAAgB;AAAA,AAAA,IAAAhB,uBAAAgB;AAAA,AAAA,GAAA,AAAAC,6BAAAjB;AAAA,IAAAkB,wBAAA,AAAAC,sBAAAnB;AAAA,AAAA,eAAA,AAAAoB,qBAAApB;eAAAkB;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,mBAAA,AAAAC,gBAAAvB;IAAAQ,yBAAA,AAAAC,4CAAAa,iBAAA,IAAA;IAAAZ,0BAAA,AAAAD,4CAAAa,iBAAA,IAAA;AAAA,AAAA,AAAA,IAAA,AAAA,IAAAE,iBAAA,mFAAA,AAAAZ,qDAAAjB,wEAAA,6DAAAI,gFAAA,mDAAA,AAAAD;AAAA,AAAA,CAAAY,wDAAAA,sDAAAc,kBAAAd,kCAAAc;gBAAA,GAAA,CAAAC,kBAAAX;AAAA,IAAAC,yBAAAU;AAAA,AAAA,AAAAnC,6FAAA,yGAAA,6BAAAkB,uBAAA,gBAAAb,wEAAAoB;;AAAA,AAAA,MAAAU;;;;AAAA;AAAA,eAAA,AAAAC,eAAA1B;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAAA;WAAA,AAAA,AAAAL,0EAAAD;;AAAA,AACE,IAAAkC,aACM,iBAAAK,WAAA,mFAAOjD,iBAAUnB;AAAjB,AAAA,GAAA,AAAAmE,6CAAA,mFAAA,sDAAA,sEAAAC;AAAA,0FAAA,8DAAA;;AAAA,AASkC,AAAI,AAAY3E,6FAAKQ;;AACjB,OAAgBR;;;;AAVtD,GAAA,AAAA0E,6CAAA,mFAAA,8DAAA,sEAAAC;AAAA,0FAAA,8DAAA;;AAAA,AAauC,OAAY3E,6FAAKQ;;;;AAbxD,GAAA,AAAAkE,6CAAA,mFAAA,8DAAA,wEAAAC;AAAA,0FAAA,2DAAA;;AAAA,AAcqC,OAAY3E;;;;AAdjD,GAAA,AAAA0E,6CAAA,mFAAA,2DAAA,sEAAAC;AAAA,0FAAA,2DAAA;;AAAA,AAiBmC,OAAY3E,6FAAKQ;;;;AAjBpD,GAAA,AAAAkE,6CAAA,mFAAA,2DAAA,gEAAAC;AAAA,0FAAA,0DAAA;;AAAA,AAkB8B,OAAQ3E,yFAAKQ;;;;AAlB3C,GAAA,AAAAkE,6CAAA,mFAAA,2DAAA,uEAAAC;AAAA,0FAAA,sDAAA;;AAAA,AAmBgC,OAAY3E,6FAAKQ;;;;AAnBjD,GAAA,AAAAkE,6CAAA,mFAAA,2DAAA,wEAAAC;AAoByB,GAAI,AAACC,uBAAOjD;AAAZ,0FAAA;;AAAA,0FAAA,8DAAA;;AAAA,AAEe,OAAgB3B;;;;;AAtBxD,GAAA,AAAA0E,6CAAA,mFAAA,0DAAA,sEAAAC;AAAA,0FAAA,0DAAA;;AAAA,AAyBiC,OAAY3E,6FAAKQ;;;;AAzBlD,GAAA,AAAAkE,6CAAA,mFAAA,0DAAA,iEAAAC;AAAA,0FAAA,2DAAA;;AAAA,AA0B+B,OAAS3E;;;;AA1BxC,AA4BE,MAAO,kOAAA,2CAAA,gFAAA,7VAAC6E,gDAAQ,CAAA,8GAAA,lBAAqDnD,kEAAcnB,6HACvDmB,2EAAoBnB;;;;;;;;;;;;oBA9BxD,AAAA4C,4CAAAmB,WAAA,IAAA,3EAAOC;gBAAP,AAAApB,4CAAAmB,WAAA,IAAA,vEAAqBE;AAArB,AAkCE,GAAA,AAAArC;AAAA,AAAA,IAAA2C,iCAAA,AAAAC,uGAAA,AAAAC,+CAAA3C,wEAAA,qDAAA4C,gBAAA,AAAA,mFAAA,2CAAA,gEAAA,oHAAA,qDAAA,2CAAA,wFAAA,+FAAA,AAAA/C,+CAAA,2CAAA,gEAAA,oHAAA,qDAAA,2CAAA,wFAAA,6FAAA,31BAAiCR,qiBAAAA,phBAAUnB,qiBAAAA,9WACKmB,qiBAAAA,rdACA6C,qiBAAAA;AAFhD,AAAA,AAAAlC,0EAAAyC;;AAAA;AAAA;;AAGA,AAAMpD,mBAAU6C;;AAChB,oBAAMC;AAAN,AAAgB,QAACA,0CAAAA,4CAAAA;;AAAjB;;;;;AAxER,AAAA,AAAA,gJAAA,hJAAShD,2JA8GJxB,MAAKgB;;AA9GV,AAAA,gBAAA,ZA8GKhB;AA9GL,AA+GI,IAAA+F,WAAA;;AAAA,AAAW,sGAAA,yDAAA,xJAAc/F;;;AAAzB,AAAA,wFAAA+F,+BAAAA,/GAAC/E,yCAAAA,mDAAAA;;;AA/GL,AAAA,AAAA,iKAAA,jKAASQ,4KAWmBK,EAAE1B,GAAG2B;;AAXjC,AAAA,YAAA,RAW4BD;AAX5B,AAYI,GAAI,AAACE,0BAAUH,+BAAwBzB;AACrC,6FAAA,uGAAA,pMAAC6B,mQAA6E7B;;AADhF;;wCAEK,AAAC8B,8CAAML,+BAAwBzB,GAAG2B,xHAClC,OAAMF;;;AAff,AAAA,AAAA,qKAAA,rKAASJ,gLA+EJxB;;AA/EL,AAAA,gBAAA,ZA+EKA;AA/EL,AAgFI,IAAMmF,UAAQ,AAACC,eAAKzD;AAApB,AACE,IAAA,AACE,AAAC2D,sDAAOH;;AACR,AAAMxD,eAAM,AAAC4D,cAAI5D;;AACjB,OAA4B3B,6GAAKmF;gBAHnC,SAAAE,LAI2CvE;AAJ3C,AAKI,sGAAA,/FAAcd,8JAAgBc;;;AAtFxC,AAAA,AAAA,oKAAA,pKAASU,+KAkHJK,EAAEsD;;AAlHP,AAAA,YAAA,RAkHKtD;AAlHL,AAmHI,IAAAmE,aAAA,AAAArD,cAAiB,AAAC0D,eAAKzE;IAAvBqE,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,eAAA,AAAAD,kDAAAE,7DAAQC;AAAR,AAAA,AACE,CAACA,yCAAAA,+DAAAA,xBAASjB,2CAAAA,nCAAQxD,2CAAAA;;AADpB;AAAA,eAAAqE;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAzC,qBAAA,AAAAf,cAAAqD;AAAA,AAAA,GAAAtC;AAAA,AAAA,IAAAsC,iBAAAtC;AAAA,AAAA,GAAA,AAAAC,6BAAAqC;AAAA,IAAApC,kBAAA,AAAAC,sBAAAmC;AAAA,AAAA,eAAA,AAAAlC,qBAAAkC;eAAApC;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,eAAA,AAAAK,gBAAA+B,3BAAQI;AAAR,AAAA,AACE,CAACA,yCAAAA,+DAAAA,xBAASjB,2CAAAA,nCAAQxD,2CAAAA;;AADpB;AAAA,eAAA,AAAAyC,eAAA4B;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;;AAnHJ,AAAA,AAAA,oJAAA,pJAASxE,+JAyGJK,EAAEf;;AAzGP,AAAA,YAAA,RAyGKe;AAzGL,AA0GI,AAAMF,eAAMmE;;AACZ,MAAOhF;;;AA3GX,AAAA,qEAAA,rEAASU;AAAT,AAAA,0FAAA,oBAAA,mEAAA,2CAAA,0DAAA,cAAA,oBAAA,4DAAA,2CAAA,0DAAA,cAAA,oBAAA,+FAAA,2CAAA,0DAAA;;;AAAA,AAAA,2EAAA,3EAASA;;AAAT,AAAA,8EAAA,9EAASA;;AAAT,AAAA,mFAAA,WAAAJ,mBAAAC,qBAAAC,tIAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;iEAAA,jEAASI,0IAA+BC,UACAC,MACAC;AAFxC,AAAA,YAAAJ,0DAAwCE,UACAC,MACAC;;;AAF/BJ,AAiIT,AAAK8E,6DAAY,+DAAA,kHAAA,jLAAC7E,qHAAmBqE;AAOrC;;;;;;;;;;;;0DAAA,1DAAMS,4HAWHtG;AAXH,AAYE,GAAI,UAAA,TAAMA;AACN,MAAO,gDAAA,6DAAA,7GAAC4E;;AACR,AAAC9E,oDAAKuG,2DAAYrG;;;AAdxB;;AAkBA;;;;;;;;;;;;;;+DAAA,/DAAMuG,sIAaHrB;AAbH,AAcE,AAACG,sDAAOH;;AACR,AAACjE,0EAA2BoF,2DAAYnB;;AAf1C","names":["mranderson047.re-frame.v0v10v2.re-frame.router/later-fns","f","G__19325","mranderson047.re-frame.v0v10v2.re-frame.interop/after-render","mranderson047.re-frame.v0v10v2.re-frame.interop/next-tick","x__4243__auto__","m__4244__auto__","mranderson047/re-frame.v0v10v2.re-frame.router.push","goog/typeOf","cljs.core/missing-protocol","mranderson047/re-frame.v0v10v2.re-frame.router.add-post-event-callback","mranderson047/re-frame.v0v10v2.re-frame.router.remove-post-event-callback","mranderson047/re-frame.v0v10v2.re-frame.router.-fsm-trigger","mranderson047/re-frame.v0v10v2.re-frame.router.-add-event","mranderson047/re-frame.v0v10v2.re-frame.router.-process-1st-event-in-queue","mranderson047/re-frame.v0v10v2.re-frame.router.-run-next-tick","mranderson047/re-frame.v0v10v2.re-frame.router.-run-queue","mranderson047/re-frame.v0v10v2.re-frame.router.-exception","mranderson047/re-frame.v0v10v2.re-frame.router.-pause","mranderson047/re-frame.v0v10v2.re-frame.router.-resume","mranderson047/re-frame.v0v10v2.re-frame.router.-call-post-event-callbacks","mranderson047.re-frame.v0v10v2.re-frame.router/IEventQueue","mranderson047.re-frame.v0v10v2.re-frame.router/push","this","event","mranderson047.re-frame.v0v10v2.re-frame.router/add-post-event-callback","id","callack","mranderson047.re-frame.v0v10v2.re-frame.router/remove-post-event-callback","mranderson047.re-frame.v0v10v2.re-frame.router/-fsm-trigger","trigger","arg","mranderson047.re-frame.v0v10v2.re-frame.router/-add-event","mranderson047.re-frame.v0v10v2.re-frame.router/-process-1st-event-in-queue","mranderson047.re-frame.v0v10v2.re-frame.router/-run-next-tick","mranderson047.re-frame.v0v10v2.re-frame.router/-run-queue","mranderson047.re-frame.v0v10v2.re-frame.router/-exception","ex","mranderson047.re-frame.v0v10v2.re-frame.router/-pause","later-fn","mranderson047.re-frame.v0v10v2.re-frame.router/-resume","mranderson047.re-frame.v0v10v2.re-frame.router/-call-post-event-callbacks","cljs.core/PROTOCOL_SENTINEL","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","mranderson047.re-frame.v0v10v2.re-frame.router/EventQueue","mranderson047.re-frame.v0v10v2.re-frame.router/->EventQueue","fsm-state","queue","post-event-callback-fns","_","callback-fn","cljs.core/contains?","mranderson047.re_frame.v0v10v2.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.trace/is-trace-enabled?","*current-trace*19434","mranderson047.re-frame.v0v10v2.re-frame.trace/*current-trace*","mranderson047.re-frame.v0v10v2.re-frame.trace/start-trace","end__19177__auto__","mranderson047.re-frame.v0v10v2.re-frame.interop/now","duration__19178__auto__","seq__19435","cljs.core/seq","cljs.core/deref","mranderson047.re-frame.v0v10v2.re-frame.trace/trace-cbs","chunk__19436","count__19437","i__19438","vec__19439","k__19179__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cb__19180__auto__","G__19450","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","e19446","java/lang.Exception","e__19181__auto__","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__19462","cljs.core/first","G__19473","e19468","cljs.core/next","vec__19474","vec__19500","new-fsm-state","action-fn","G__19477","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__19503","cljs.core/empty?","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","new-trace__19182__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","event-v","cljs.core/peek","e19517","mranderson047.re-frame.v0v10v2.re-frame.events/handle","cljs.core/pop","G__19433","n","temp__5455__auto__","cljs.core/some","cljs.core/meta","cljs.core/keys","mranderson047.re-frame.v0v10v2.re-frame.interop/empty-queue","G__19515","seq__19518","chunk__19519","count__19520","i__19521","callback","cljs.core/vals","mranderson047.re-frame.v0v10v2.re-frame.router/event-queue","mranderson047.re-frame.v0v10v2.re-frame.router/dispatch","mranderson047.re-frame.v0v10v2.re-frame.router/dispatch-sync"]}