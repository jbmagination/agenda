{"version":3,"sources":["mranderson047/reagent/v0v8v0_alpha2/reagent/dom.cljs"],"sourcesContent":["(ns mranderson047.reagent.v0v8v0-alpha2.reagent.dom\n  (:require [react-dom :as react-dom]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.impl.util :as util]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template :as tmpl]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.impl.batching :as batch]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.ratom :as ratom]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.debug :refer-macros [dbg]]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.interop :refer-macros [$ $!]]))\n\n(defonce ^:private imported nil)\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  (react-dom/unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (binding [util/*always-update* true]\n    (react-dom/render (comp) container\n      (fn []\n        (binding [util/*always-update* false]\n          (swap! roots assoc container [comp container])\n          (batch/flush-after-render)\n          (if (some? callback)\n            (callback)))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container nil))\n  ([comp container callback]\n   (ratom/flush!)\n   (let [f (fn []\n             (tmpl/as-element (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node [container]\n  (unmount-comp container))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  [this]\n  (react-dom/findDOMNode this))\n\n(set! tmpl/find-dom-node dom-node)\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  []\n  (ratom/flush!)\n  (doseq [v (vals @roots)]\n    (apply re-render-component v))\n  \"Updated\")\n"],"mappings":"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","names":["js/mranderson047","js/mranderson047.reagent","js/mranderson047.reagent.v0v8v0-alpha2","js/mranderson047.reagent.v0v8v0-alpha2.reagent","js/mranderson047.reagent.v0v8v0-alpha2.reagent.dom","js/mranderson047.reagent.v0v8v0-alpha2.reagent.dom.imported","mranderson047.reagent.v0v8v0-alpha2.reagent.dom/imported","js/mranderson047.reagent.v0v8v0-alpha2.reagent.dom.roots","mranderson047.reagent.v0v8v0-alpha2.reagent.dom/roots","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","mranderson047.reagent.v0v8v0-alpha2.reagent.dom/unmount-comp","container","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","js/module$node_modules$react_dom$index.unmountComponentAtNode","mranderson047.reagent.v0v8v0-alpha2.reagent.dom/render-comp","comp","callback","*always-update*18868","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.util/*always-update*","G__18869","G__18870","G__18871","js/module$node_modules$react_dom$index.render","*always-update*18872","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.batching/flush-after-render","mranderson047.reagent.v0v8v0-alpha2.reagent.dom/re-render-component","var_args","G__18876","mranderson047.reagent.v0v8v0-alpha2.reagent.dom/render","js/Error","mranderson047.reagent.v0v8v0_alpha2.reagent.dom.render.cljs$core$IFn$_invoke$arity$3","mranderson047.reagent.v0v8v0-alpha2.reagent.ratom/flush!","f","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/as-element","cljs.core/fn?","mranderson047.reagent.v0v8v0-alpha2.reagent.dom/unmount-component-at-node","mranderson047.reagent.v0v8v0-alpha2.reagent.dom/dom-node","this","js/module$node_modules$react_dom$index.findDOMNode","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/find-dom-node","mranderson047.reagent.v0v8v0-alpha2.reagent.dom/force-update-all","seq__18891","cljs.core/seq","chunk__18892","count__18893","i__18894","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","v","cljs.core/deref","cljs.core/vals","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]}