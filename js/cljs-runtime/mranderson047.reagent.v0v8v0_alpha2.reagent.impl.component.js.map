{"version":3,"sources":["mranderson047/reagent/v0v8v0_alpha2/reagent/impl/component.cljs"],"sourcesContent":["(ns mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component\n  (:require [create-react-class :as create-react-class]\n            [react :as react]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.impl.util :as util]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.impl.batching :as batch]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.ratom :as ratom]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.interop :refer-macros [$ $!]]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.debug :refer-macros [dbg prn dev? warn error warn-unless\n                                          assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {} i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (aget o k)) (inc i)))\n        m))))\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [c p]\n  (if-some [a ($ p :argv)]\n    a\n    [(.-constructor c) (shallow-obj-to-map p)]))\n\n(defn get-argv [c]\n  (props-argv c ($ c :props)))\n\n(defn get-props [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-props v)\n      (shallow-obj-to-map p))))\n\n(defn get-children [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-children v)\n      (->> ($ p :children)\n           (react/Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :render)))))\n\n(defn ^boolean reagent-component? [c]\n  (some? ($ c :reagentRender)))\n\n(defn cached-react-class [c]\n  ($ c :cljsReactClass))\n\n(defn cache-react-class [c constructor]\n  ($! c :cljsReactClass constructor))\n\n\n;;; State\n\n(defn state-atom [this]\n  (let [sa ($ this :cljsState)]\n    (if-not (nil? sa)\n      sa\n      ($! this :cljsState (ratom/atom nil)))))\n\n;; avoid circular dependency: this gets set from template.cljs\n(defonce as-element nil)\n\n\n;;; Rendering\n\n(defn wrap-render [c]\n  (let [f ($ c :reagentRender)\n        _ (assert-callable f)\n        res (if (true? ($ c :cljsLegacyRender))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (as-element res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (as-element (apply vector res args)))\n                           res)]\n                   ($! c :reagentRender f)\n                   (recur c))\n      :else res)))\n\n(declare comp-name)\n\n(defn do-render [c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(def static-fns\n  {:render\n   (fn render []\n     (this-as c (if util/*non-reactive*\n                  (do-render c)\n                  (let [rat ($ c :cljsRatom)]\n                    (batch/mark-rendered c)\n                    (if (nil? rat)\n                      (ratom/run-in-reaction #(do-render c) c \"cljsRatom\"\n                                             batch/queue-render rat-opts)\n                      (._run rat false))))))})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getInitialState\n    (fn getInitialState []\n      (this-as c (reset! (state-atom c) (.call f c c))))\n\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv ($ c :props.argv)\n                         new-argv ($ nextprops :argv)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (not= old-argv new-argv))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops]\n      (this-as c (.call f c c (props-argv c oldprops))))\n\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c\n               ($! c :cljsMountOrder (batch/next-mount-count))\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> ($ c :cljsRatom)\n                       ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidCatch\n    (fn componentDidCatch [error info]\n      (this-as c (.call f c c error info)))\n\n    nil))\n\n(defn get-wrapper [key f name]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillMount nil\n                 :componentWillUnmount nil})\n\n(def dash-to-camel (util/memoize-1 util/dash-to-camel))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-camel keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender :componentFunction])\n          render-fun (-> renders vals first)]\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:componentFunction fmap))\n        legacy-render (nil? render-fun)\n        render-fun (or render-fun\n                       (:render fmap))\n        name (str (or (:displayName fmap)\n                      (util/fun-name render-fun)))\n        name (case name\n               \"\" (str (gensym \"reagent\"))\n               name)\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v name)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :autobind false\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (:render static-fns))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (aset (name k) v)))\n             #js{} m))\n\n(defn cljsify [body]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      wrap-funs\n      map-to-js))\n\n(defn create-class [body]\n  {:pre [(map? body)]}\n  (->> body\n       cljsify\n       create-react-class))\n\n(defn fiber-component-path [fiber]\n  (let [name (some-> fiber\n                     ($ :type)\n                     ($ :displayName))\n        parent (some-> fiber\n                       ($ :return))\n        path (some-> parent\n                     fiber-component-path\n                     (str \" > \"))\n        res (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  (if-let [fiber (some-> c ($ :_reactInternalFiber))]\n    (fiber-component-path fiber)\n    (let [elem (or (some-> (or (some-> c ($ :_reactInternalInstance))\n                               c)\n                           ($ :_currentElement)))\n          name (some-> elem\n                       ($ :type)\n                       ($ :displayName))\n          path (some-> elem\n                       ($ :_owner)\n                       component-path\n                       (str \" > \"))\n          res (str path name)]\n      (when-not (empty? res) res))))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (or (component-path c)\n                (some-> c .-constructor util/fun-name))]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn fn-to-class [f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (let [n (util/fun-name f)]\n                                               (if (empty? n) f n))\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender)]\n      (cache-react-class f res))))\n\n(defn as-class [tag]\n  (if-some [cached-class (cached-react-class tag)]\n    cached-class\n    (fn-to-class tag)))\n\n(defn reactify-component [comp]\n  (if (react-class? comp)\n    comp\n    (as-class comp)))\n"],"mappings":"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","names":["mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/shallow-obj-to-map","o","ks","cljs.core/js-keys","len","m","i","k","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/extract-props","v","p","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/map?","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/extract-children","first-child","cljs.core/count","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/props-argv","c","temp__5459__auto__","a","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/get-argv","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/get-props","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/get-children","G__18609","js/module$node_modules$react$index.Children.toArray","cljs.core.into.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/reagent-class?","cljs.core/fn?","G__18620","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/react-class?","G__18623","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/reagent-component?","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/cached-react-class","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/cache-react-class","constructor","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/state-atom","this","sa","mranderson047.reagent.v0v8v0_alpha2.reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1","js/mranderson047","js/mranderson047.reagent","js/mranderson047.reagent.v0v8v0-alpha2","js/mranderson047.reagent.v0v8v0-alpha2.reagent","js/mranderson047.reagent.v0v8v0-alpha2.reagent.impl","js/mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component","js/mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component.as-element","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/as-element","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/wrap-render","f","_","cljs.core/ifn?","js/Error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","res","n","G__18625","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core/vector?","args","G__18629","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/do-render","*current-component*18647","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/*current-component*","ok","mranderson047/reagent.v0v8v0-alpha2.reagent.debug.has-console","mranderson047/reagent.v0v8v0-alpha2.reagent.debug.tracking","mranderson047/reagent.v0v8v0-alpha2.reagent.debug.track-console","js/console","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/comp-name","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/rat-opts","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/static-fns","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.util/*non-reactive*","rat","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.batching/mark-rendered","mranderson047.reagent.v0v8v0-alpha2.reagent.ratom/run-in-reaction","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.batching/queue-render","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/custom-wrapper","key","G__18666","cljs.core/Keyword","cljs.core/reset!","nextprops","nextstate","or__3949__auto__","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.util/*always-update*","old-argv","new-argv","noargv","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","oldprops","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.batching/next-mount-count","G__18694","mranderson047.reagent.v0v8v0-alpha2.reagent.ratom/dispose!","error","info","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/get-wrapper","name","wrap","and__3938__auto__","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/obligatory","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/dash-to-camel","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.util/memoize-1","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.util/dash-to-camel","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/camelify-map-keys","fun-map","cljs.core/reduce-kv","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/add-obligatory","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/wrap-funs","fmap","renders","cljs.core/select-keys","render-fun","cljs.core/vals","cljs.core/first","legacy-render","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.util/fun-name","G__18703","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/map-to-js","G__18704","cljs.core/name","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/cljsify","body","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/create-class","G__18708","js/module$node_modules$create_react_class$index","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/fiber-component-path","fiber","G__18710","parent","G__18711","path","G__18712","cljs.core/empty?","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/component-path","temp__5455__auto__","G__18715","elem","G__18717","G__18719","G__18720","G__18721","G__18722","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/fn-to-class","spec","cljs.core/meta","withrender","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/as-class","tag","cached-class","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/reactify-component","comp"]}