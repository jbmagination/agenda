{"version":3,"sources":["mranderson047/reagent/v0v8v0_alpha2/reagent/impl/template.cljs"],"sourcesContent":["(ns mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.impl.util :as util :refer [is-client]]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component :as comp]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.impl.batching :as batch]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.ratom :as ratom]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.interop :refer-macros [$ $!]]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]))\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [])\n\n\n;;; Common utilities\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (aget o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (aset (cached-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn oset [o k v]\n  (doto (if (nil? o) #js{} o)\n    (aset k v)))\n\n(defn oget [o k]\n  (if (nil? o) nil (aget o k)))\n\n(defn set-id-class [p id-class]\n  (let [id ($ id-class :id)\n        p (if (and (some? id)\n                   (nil? (oget p \"id\")))\n            (oset p \"id\" id)\n            p)]\n    (if-some [class ($ id-class :className)]\n      (let [old (oget p \"className\")]\n        (oset p \"className\" (if (nil? old)\n                              class\n                              (str class \" \" old))))\n      p)))\n\n(defn stringify-class [{:keys [class] :as props}]\n  (if (coll? class)\n    (->> class\n         (filter identity)\n         (string/join \" \")\n         (assoc props :class))\n    props))\n\n(defn convert-props [props id-class]\n  (-> props\n      stringify-class\n      convert-prop-value\n      (set-id-class id-class)))\n\n;;; Specialization for input components\n\n;; This gets set from mranderson047.reagent.v0v8v0-alpha2.reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value component {:keys [on-write]}]\n  (if-not (and (identical? node ($ js/document :activeElement))\n            (has-selection-api? ($ node :type))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      ($! component :cljsDOMValue rendered-value)\n      ($! node :value rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n    \n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value ($ node :value)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         ($ node :selectionStart))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          ($! component :cljsDOMValue rendered-value)\n          ($! node :value rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          ($! node :selectionStart new-cursor-offset)\n          ($! node :selectionEnd new-cursor-offset))))))\n\n(defn input-component-set-value [this]\n  (when ($ this :cljsInputLive)\n    ($! this :cljsInputDirty false)\n    (let [rendered-value ($ this :cljsRenderedValue)\n          dom-value ($ this :cljsDOMValue)\n          node (find-dom-node this) ;; Default to the root node within this component\n          synthetic-on-update ($ this :cljsSyntheticOnUpdate)]\n      (when (not= rendered-value dom-value)\n        (if (fn? synthetic-on-update)\n          (synthetic-on-update input-node-set-value node rendered-value dom-value this)\n          (input-node-set-value node rendered-value dom-value this {}))))))\n\n(defn input-handle-change [this on-change e]\n  ($! this :cljsDOMValue (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not ($ this :cljsInputDirty)\n    ($! this :cljsInputDirty true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  ([this jsprops {:keys [synthetic-on-update synthetic-on-change]}]\n   ;; Don't rely on React for updating \"controlled inputs\", since it\n   ;; doesn't play well with async rendering (misses keystrokes).\n   (when (and (some? jsprops)\n           (.hasOwnProperty jsprops \"onChange\")\n           (.hasOwnProperty jsprops \"value\"))\n     (assert find-dom-node\n       \"reagent.dom needs to be loaded for controlled input to work\")\n     (when synthetic-on-update\n       ;; Pass along any synthetic input setter given\n       ($! this :cljsSyntheticOnUpdate synthetic-on-update))\n     (let [v ($ jsprops :value)\n           value (if (nil? v) \"\" v)\n           on-change ($ jsprops :onChange)\n           on-change (if synthetic-on-change\n                       (partial synthetic-on-change on-change)\n                       on-change)]\n       (when-not ($ this :cljsInputLive)\n         ;; set initial value\n         ($! this :cljsInputLive true)\n         ($! this :cljsDOMValue value))\n       ($! this :cljsRenderedValue value)\n       (js-delete jsprops \"value\")\n       (doto jsprops\n         ($! :defaultValue value)\n         ($! :onChange #(input-handle-change this on-change %))))))\n  ([this jsprops]\n   (input-render-setup this jsprops {})))\n\n(defn input-unmount [this]\n  ($! this :cljsInputLive nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(def reagent-synthetic-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv comp jsprops first-child)))})\n\n(def synthetic-input-spec\n  ;; Same as `input-spec` except it takes another argument for `input-setter`\n  {:display-name \"ReagentSyntheticInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [on-update on-change argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops {:synthetic-on-update on-update\n                                         :synthetic-on-change on-change})\n       (make-element argv comp jsprops first-child)))})\n\n\n(defn reagent-input\n  []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n(defn reagent-synthetic-input\n  []\n  (when (nil? reagent-synthetic-input-class)\n    (set! reagent-synthetic-input-class (comp/create-class synthetic-input-spec)))\n  reagent-synthetic-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id class] (->> hiccup-tag name (re-matches re-tag) next)\n        class (when-not (nil? class)\n                (string/replace class #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\"\n                     (comp/comp-name)))\n    #js{:name tag\n        :id id\n        :className class}))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js{:argv v}]\n    (when-some [key (key-from-vec v)]\n      ($! jsprops :key key))\n    (react/createElement c jsprops)))\n\n(defn adapt-react-class\n  ([c {:keys [synthetic-input]}]\n   (let [on-update (:on-update synthetic-input)\n         on-change (:on-change synthetic-input)]\n     (when synthetic-input\n       (assert (fn? on-update))\n       (assert (fn? on-change)))\n     (let [wrapped (doto (->NativeWrapper)\n                     ($! :name c)\n                     ($! :id nil)\n                     ($! :class nil))\n           wrapped (if synthetic-input\n                     (doto wrapped\n                       ($! :syntheticInput true))\n                     wrapped)\n           wrapped (if synthetic-input\n                     (doto wrapped\n                       ($! :syntheticOnChange on-change))\n                     wrapped)\n           wrapped (if synthetic-input\n                     ;; This is a synthetic input component, i.e. it has a complex\n                     ;; nesting of elements such that the root node is not necessarily\n                     ;; the <input> tag we need to control, and/or it needs to execute\n                     ;; custom code when updated values are written so we provide an affordance\n                     ;; to configure a setter fn that can choose a different DOM node\n                     ;; than the root node if it wants, and can supply a function hooked\n                     ;; to value updates so it can maintain its own component state as needed.\n                     (doto wrapped\n                       ($! :syntheticOnUpdate on-update))\n                     wrapped)]\n       wrapped)))\n  ([c]\n   (adapt-react-class c {})))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (aset tag-name-cache x (parse-tag x))))\n\n(declare as-element)\n\n(defn native-element [parsed argv first]\n  (let [comp ($ parsed :name)\n        synthetic-input ($ parsed :syntheticInput)]\n    (let [props (nth argv first nil)\n          hasprops (or (nil? props) (map? props))\n          jsprops (convert-props (if hasprops props) parsed)\n          first-child (+ first (if hasprops 1 0))]\n      (if (or synthetic-input (input-component? comp))\n        (-> (if synthetic-input\n              ;; If we are dealing with a synthetic input, use the synthetic-input-spec form:\n              [(reagent-synthetic-input)\n               ($ parsed :syntheticOnUpdate)\n               ($ parsed :syntheticOnChange)\n               argv\n               comp\n               jsprops\n               first-child]\n              ;; Else use the regular input-spec form:\n              [(reagent-input) argv comp jsprops first-child])\n            (with-meta (meta argv))\n            as-element)\n        (let [key (-> (meta argv) get-key)\n              p (if (nil? key)\n                  jsprops\n                  (oset jsprops \"key\" key))]\n          (make-element argv comp p first-child))))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n \"\" x (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          0 (let [comp (nth v 1 nil)]\n              ;; Support [:> comp ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (assert (or (string? comp) (fn? comp))\n                      (hiccup-err v \"Expected React component in\"))\n              (native-element #js{:name comp} v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          (recur [(subs n 0 pos)\n                  (assoc v 0 (subs n (inc pos)))])))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (aset a i (as-element (aget a i))))\n    a))\n\n(defn expand-seq-dev [s o]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (let [val (aget a i)]\n        (when (and (vector? val)\n                   (nil? (key-from-vec val)))\n          ($! o :no-key true))\n        (aset a i (as-element val))))\n    a))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when ($ ctx :no-key)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv comp jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement comp jsprops)\n\n    1 (react/createElement comp jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[comp jsprops] argv))))\n"],"mappings":"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","names":["mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/re-tag","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/NativeWrapper","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/->NativeWrapper","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/named?","x","cljs.core/Keyword","cljs.core/Symbol","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/hiccup-tag?","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/valid-tag?","cljs.core/ifn?","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/prop-name-cache","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/cache-get","o","k","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/cached-prop-name","temp__5459__auto__","k'","cljs.core/name","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.util/dash-to-camel","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/js-val?","goog/typeOf","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/kv-conv","v","G__18752","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/convert-prop-value","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/oset","G__18757","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/oget","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/set-id-class","p","id-class","id","class","old","p__18779","map__18780","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/stringify-class","props","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/convert-props","js/mranderson047","js/mranderson047.reagent","js/mranderson047.reagent.v0v8v0-alpha2","js/mranderson047.reagent.v0v8v0-alpha2.reagent","js/mranderson047.reagent.v0v8v0-alpha2.reagent.impl","js/mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template","js/mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template.find-dom-node","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/find-dom-node","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/these-inputs-have-selection-api","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/has-selection-api?","input-type","cljs.core/contains?","p__18785","map__18786","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/input-node-set-value","node","rendered-value","dom-value","component","on-write","js/document","cljs.core/fn?","node-value","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.batching/do-after-render","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/input-component-set-value","existing-offset-from-end","cljs.core/count","new-cursor-offset","this","synthetic-on-update","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/input-handle-change","on-change","e","var_args","G__18798","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/input-render-setup","js/Error","p__18799","map__18800","jsprops","synthetic-on-change","and__3938__auto__","value","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","G__18805","p1__18796#","mranderson047.reagent.v0v8v0_alpha2.reagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$3","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/input-unmount","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/input-component?","G__18807","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/reagent-input-class","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/reagent-synthetic-input-class","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/input-spec","argv","comp","first-child","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/*current-component*","mranderson047.reagent.v0v8v0_alpha2.reagent.impl.template.input_render_setup.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/make-element","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/synthetic-input-spec","on-update","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/reagent-input","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/create-class","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/reagent-synthetic-input","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/parse-tag","hiccup-tag","vec__18811","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","tag","cljs.core/re-matches","cljs.core/next","clojure.string/replace","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/comp-name","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/try-get-key","e18817","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/get-key","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/key-from-vec","cljs.core/meta","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/reag-element","c","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/as-class","temp__5461__auto__","key","js/module$node_modules$react$index.createElement","G__18820","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/adapt-react-class","p__18822","map__18824","synthetic-input","wrapped","G__18828","G__18829","G__18830","G__18831","mranderson047.reagent.v0v8v0_alpha2.reagent.impl.template.adapt_react_class.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/tag-name-cache","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/cached-parse","s","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/native-element","parsed","first","hasprops","or__3949__auto__","G__18835","cljs.core/with-meta","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/as-element","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/str-coll","coll","clojure.walk/prewalk","n","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.util/fun-name","G__18836","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/hiccup-err","seq18837","G__18838","cljs.core/first","self__4518__auto__","msg","cljs.core/str","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/vec-to-elem","mranderson047.reagent.v0v8v0_alpha2.reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic","pos","G__18842","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/vector?","cljs.core/seq?","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/expand-seq-check","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.component/as-element","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/expand-seq","a","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","n__4408__auto__","i","mranderson047.reagent.v0v8v0-alpha2.reagent.impl.template/expand-seq-dev","val","vec__18848","ctx","res","derefed","mranderson047.reagent.v0v8v0-alpha2.reagent.ratom/check-derefs","mranderson047/reagent.v0v8v0-alpha2.reagent.debug.has-console","mranderson047/reagent.v0v8v0-alpha2.reagent.debug.tracking","mranderson047/reagent.v0v8v0-alpha2.reagent.debug.track-console","js/console","G__18851","G__18852","G__18853","G__18854"]}