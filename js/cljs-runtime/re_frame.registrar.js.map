{"version":3,"sources":["re_frame/registrar.cljc"],"sourcesContent":["(ns re-frame.registrar\n  \"In many places, re-frame asks you to associate an `id` (keyword)\n  with a `handler` (function).  This namespace contains the\n  central registry of such associations.\"\n  (:require  [re-frame.interop :refer [debug-enabled?]]\n             [re-frame.loggers :refer [console]]))\n\n\n;; kinds of handlers\n(def kinds #{:event :fx :cofx :sub})\n\n;; This atom contains a register of all handlers.\n;; Contains a two layer map, keyed first by `kind` (of handler), and then `id` of handler.\n;; Leaf nodes are handlers.\n(def kind->id->handler  (atom {}))\n\n\n(defn get-handler\n\n  ([kind]\n   (get @kind->id->handler kind))\n\n  ([kind id]\n   (-> (get @kind->id->handler kind)\n       (get id)))\n\n  ([kind id required?]\n   (let [handler (get-handler kind id)]\n     (when debug-enabled?                          ;; This is in a separate `when` so Closure DCE can run ...\n       (when (and required? (nil? handler))        ;; ...otherwise you'd need to type-hint the `and` with a ^boolean for DCE.\n         (console :error \"re-frame: no\" (str kind) \"handler registered for:\" id)))\n     handler)))\n\n\n(defn register-handler\n  [kind id handler-fn]\n  (when debug-enabled?                                       ;; This is in a separate when so Closure DCE can run\n    (when (get-handler kind id false)\n      (console :warn \"re-frame: overwriting\" (str kind) \"handler for:\" id)))   ;; allow it, but warn. Happens on figwheel reloads.\n  (swap! kind->id->handler assoc-in [kind id] handler-fn)\n  handler-fn)    ;; note: returns the just registered handler\n\n\n(defn clear-handlers\n  ([]            ;; clear all kinds\n   (reset! kind->id->handler {}))\n\n  ([kind]        ;; clear all handlers for this kind\n   (assert (kinds kind))\n   (swap! kind->id->handler dissoc kind))\n\n  ([kind id]     ;; clear a single handler for a kind\n   (assert (kinds kind))\n   (if (get-handler kind id)\n     (swap! kind->id->handler update-in [kind] dissoc id)\n     (console :warn \"re-frame: can't clear\" (str kind) \"handler for\" (str id \". Handler not found.\")))))\n"],"mappings":";;;;AASA,2BAAA,iFAAA,yDAAA,2DAAA,0DAAA,1RAAKA;AAKL,AAAKC,6CAAmB,6CAAA,7CAACC;AAGzB,AAAA,iCAAA,yCAAAC,1EAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,+DAAA,/DAAMD,0EAEFE;AAFJ,AAGG,mDAAA,AAAAC,5CAACC,4DAAKR,4CAAkBM;;;AAH3B,AAAA,+DAAA,/DAAMF,0EAKFE,KAAKG;AALT,mDAMO,4CAAA,AAAAF,5CAACC,4DAAKR,4CAAkBM,3JACxB,OAACE,0JAAIC;;;AAPZ,AAAA,+DAAA,/DAAML,0EASFE,KAAKG,GAAGC;AATZ,AAUG,IAAMC,UAAQ,AAACC,6DAAYN,KAAKG;AAAhC,AACE,GAAMI;AAAN,AACE,oBAAM,iBAAAC,oBAAKJ;AAAL,AAAA,oBAAAI;AAAe,mBAAA,XAAMH;;AAArBG;;;AAAN,AACE,8DAAA,yGAAA,4EAAA,nPAACC,sLAA8B,6CAAKT,0CAAgCG;;AADtE;;AADF;;AAGAE;;;AAdL,AAAA,yDAAA,zDAAMP;;AAAN,AAiBA,sCAAA,tCAAMY,oFACHV,KAAKG,GAAGQ;AADX,AAEE,GAAMJ;AAAN,AACE,oBAAM,qEAAA,rEAACK,6DAAYZ,KAAKG;AAAxB,AACE,8DAAA,uGAAA,qFAAA,1PAACM,6LAAsC,6CAAKT,+BAAqBG;;AADnE;;AADF;;AAGA,iHAAA,jHAACU,mDAAMnB,2CAAkBoB,sGAAUd,KAAKG,WAAIQ;;AAC5CA;;AAGF,AAAA,oCAAA,4CAAAf,hFAAMoB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,gEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAjB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,kEAAA,lEAAMiB;AAAN,AAEG,wEAAA,jEAACC,sBAAOvB;;;AAFX,AAAA,kEAAA,lEAAMsB,6EAIFhB;AAJJ,AAKG,oBAAQ,CAACP,yDAAAA,+DAAAA,RAAMO,2CAAAA;AAAf;AAAA,AAAA,MAAA,KAAAD,MAAA;;;AACA,OAACmB,mDAAMxB,2CAAkByB,iBAAOnB;;;AANnC,AAAA,kEAAA,lEAAMgB,6EAQFhB,KAAKG;AART,AASG,oBAAQ,CAACV,yDAAAA,+DAAAA,RAAMO,2CAAAA;AAAf;AAAA,AAAA,MAAA,KAAAD,MAAA;;;AACA,oBAAI,AAACO,6DAAYN,KAAKG;AACpB,gIAAA,zHAACiB,0DAAM1B,2CAAkB2B,uGAAWrB,aAAMmB,mEAAOhB;;AACjD,qEAAA,uGAAA,qFAAA,1PAACM,6LAAsC,6CAAKT,8BAAoB,iDAAA,JAAKG;;;;AAZ1E,AAAA,4DAAA,5DAAMa;;AAAN","names":["re-frame.registrar/kinds","re-frame.registrar/kind->id->handler","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","var_args","G__26146","re-frame.registrar/get-handler","js/Error","kind","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","id","required?","handler","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2","re-frame.interop/debug-enabled?","and__3938__auto__","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","re-frame.registrar/register-handler","handler-fn","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","G__26154","re-frame.registrar/clear-handlers","cljs.core/reset!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in"]}