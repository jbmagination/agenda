{"version":3,"sources":["reagent/core.cljs"],"sourcesContent":["(ns reagent.core\n  (:require-macros [reagent.core])\n  (:refer-clojure :exclude [partial atom flush])\n  (:require [reagent.impl.template :as tmpl]\n            [reagent.impl.component :as comp]\n            [reagent.impl.util :as util]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.debug :as deb :refer-macros [dbg prn\n                                                  assert-some assert-component\n                                                  assert-js-object assert-new-state\n                                                  assert-callable]]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.dom :as dom]))\n\n(def is-client util/is-client)\n\n(def react util/react)\n\n(defn create-element\n  \"Create a native React element, by calling React.createElement directly.\n\n  That means the second argument must be a javascript object (or nil), and\n  that any Reagent hiccup forms must be processed with as-element. For example\n  like this:\n\n    (r/create-element \\\"div\\\" #js{:className \\\"foo\\\"}\n       \\\"Hi \\\" (r/as-element [:strong \\\"world!\\\"])\n\n  which is equivalent to\n\n    [:div.foo \\\"Hi\\\" [:strong \\\"world!\\\"]]\"\n  ([type]\n   (create-element type nil))\n  ([type props]\n   (assert-js-object props)\n   ($ react createElement type props))\n  ([type props child]\n   (assert-js-object props)\n   ($ react createElement type props child))\n  ([type props child & children]\n   (assert-js-object props)\n   (apply ($ react :createElement) type props child children)))\n\n(defn as-element\n  \"Turns a vector of Hiccup syntax into a React element. Returns form\n  unchanged if it is not a vector.\"\n  [form]\n  (tmpl/as-element form))\n\n(defn adapt-react-class\n  \"Returns an adapter for a native React class, that may be used\n  just like a Reagent component function or class in Hiccup forms.\"\n  [c]\n  (assert-some c \"Component\")\n  (tmpl/adapt-react-class c))\n\n(defn reactify-component\n  \"Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map.\"\n  [c]\n  (assert-some c \"Component\")\n  (comp/reactify-component c))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (dom/render comp container))\n  ([comp container callback]\n   (dom/render comp container callback)))\n\n(defn unmount-component-at-node\n  \"Remove a component from the given DOM node.\"\n  [container]\n  (dom/unmount-component-at-node container))\n\n;; For backward compatibility\n(def as-component as-element)\n(def render-component render)\n\n(defn ^:export force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  []\n  (ratom/flush!)\n  (dom/force-update-all)\n  (batch/flush-after-render))\n\n(defn create-class\n  \"Create a component, React style. Should be called with a map,\n  looking like this:\n\n    {:get-initial-state (fn [this])\n     :component-will-receive-props (fn [this new-argv])\n     :should-component-update (fn [this old-argv new-argv])\n     :component-will-mount (fn [this])\n     :component-did-mount (fn [this])\n     :component-will-update (fn [this new-argv])\n     :component-did-update (fn [this old-argv])\n     :component-will-unmount (fn [this])\n     :reagent-render (fn [args....])}   ;; or :render (fn [this])\n\n  Everything is optional, except either :reagent-render or :render.\"\n  [spec]\n  (comp/create-class spec))\n\n\n(defn current-component\n  \"Returns the current React component (a.k.a this) in a component\n  function.\"\n  []\n  comp/*current-component*)\n\n(defn state-atom\n  \"Returns an atom containing a components state.\"\n  [this]\n  (assert-component this)\n  (comp/state-atom this))\n\n(defn state\n  \"Returns the state of a component, as set with replace-state or set-state.\n  Equivalent to (deref (r/state-atom this))\"\n  [this]\n  (assert-component this)\n  (deref (state-atom this)))\n\n(defn replace-state\n  \"Set state of a component.\n  Equivalent to (reset! (state-atom this) new-state)\"\n  [this new-state]\n  (assert-component this)\n  (assert-new-state new-state)\n  (reset! (state-atom this) new-state))\n\n(defn set-state\n  \"Merge component state with new-state.\n  Equivalent to (swap! (state-atom this) merge new-state)\"\n  [this new-state]\n  (assert-component this)\n  (assert-new-state new-state)\n  (swap! (state-atom this) merge new-state))\n\n(defn force-update\n  \"Force a component to re-render immediately.\n\n  If the second argument is true, child components will also be\n  re-rendered, even is their arguments have not changed.\"\n  ([this]\n   (force-update this false))\n  ([this deep]\n   (ratom/flush!)\n   (util/force-update this deep)\n   (batch/flush-after-render)))\n\n(defn props\n  \"Returns the props passed to a component.\"\n  [this]\n  (assert-component this)\n  (comp/get-props this))\n\n(defn children\n  \"Returns the children passed to a component.\"\n  [this]\n  (assert-component this)\n  (comp/get-children this))\n\n(defn argv\n  \"Returns the entire Hiccup form passed to the component.\"\n  [this]\n  (assert-component this)\n  (comp/get-argv this))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  [this]\n  (dom/dom-node this))\n\n(defn merge-props\n  \"Utility function that merges two maps, handling :class and :style\n  specially, like React's transferPropsTo.\"\n  [defaults props]\n  (util/merge-props defaults props))\n\n(defn flush\n  \"Render dirty components immediately to the DOM.\n\n  Note that this may not work in event handlers, since React.js does\n  batching of updates there.\"\n  []\n  (batch/flush))\n\n\n\n;; Ratom\n\n(defn atom\n  \"Like clojure.core/atom, except that it keeps track of derefs.\n  Reagent components that derefs one of these are automatically\n  re-rendered.\"\n  ([x] (ratom/atom x))\n  ([x & rest] (apply ratom/atom x rest)))\n\n(defn track\n  \"Takes a function and optional arguments, and returns a derefable\n  containing the output of that function. If the function derefs\n  Reagent atoms (or track, etc), the value will be updated whenever\n  the atom changes.\n\n  In other words, @(track foo bar) will produce the same result\n  as (foo bar), but foo will only be called again when the atoms it\n  depends on changes, and will only trigger updates of components when\n  its result changes.\n\n  track is lazy, i.e the function is only evaluated on deref.\"\n  [f & args]\n  {:pre [(ifn? f)]}\n  (ratom/make-track f args))\n\n(defn track!\n  \"An eager version of track. The function passed is called\n  immediately, and continues to be called when needed, until stopped\n  with dispose!.\"\n  [f & args]\n  {:pre [(ifn? f)]}\n  (ratom/make-track! f args))\n\n(defn dispose!\n  \"Stop the result of track! from updating.\"\n  [x]\n  (ratom/dispose! x))\n\n(defn wrap\n  \"Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n\n  Probably useful only for passing to child components.\"\n  [value reset-fn & args]\n  (assert-callable reset-fn)\n  (ratom/make-wrapper value reset-fn args))\n\n\n;; RCursor\n\n(defn cursor\n  \"Provide a cursor into a Reagent atom.\n\n  Behaves like a Reagent atom but focuses updates and derefs to\n  the specified path within the wrapped Reagent atom. e.g.,\n    (let [c (cursor ra [:nested :content])]\n      ... @c ;; equivalent to (get-in @ra [:nested :content])\n      ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n      ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n      )\n\n  The first parameter can also be a function, that should look\n  something like this:\n\n    (defn set-get\n      ([k] (get-in @state k))\n      ([k v] (swap! state assoc-in k v)))\n\n  The function will be called with one argument \u2013 the path passed to\n  cursor \u2013 when the cursor is deref'ed, and two arguments (path and\n  new value) when the cursor is modified.\n\n  Given that set-get function, (and that state is a Reagent atom, or\n  another cursor) these cursors are equivalent:\n  (cursor state [:foo]) and (cursor set-get [:foo]).\n\n  Note that a cursor is lazy: its value will not change until it is\n  used. This may be noticed with add-watch.\"\n  ([src path]\n   (ratom/cursor src path)))\n\n\n;; Utilities\n\n(defn rswap!\n  \"Swaps the value of a to be (apply f current-value-of-atom args).\n\n  rswap! works like swap!, except that recursive calls to rswap! on\n  the same atom are allowed \u2013 and it always returns nil.\"\n  [a f & args]\n  {:pre [(satisfies? IAtom a)\n         (ifn? f)]}\n  (if a.rswapping\n    (-> (or a.rswapfs (set! a.rswapfs (array)))\n        (.push #(apply f % args)))\n    (do (set! a.rswapping true)\n        (try (swap! a (fn [state]\n                        (loop [s (apply f state args)]\n                          (if-some [sf (some-> a.rswapfs .shift)]\n                            (recur (sf s))\n                            s))))\n             (finally\n               (set! a.rswapping false)))))\n  nil)\n\n(defn next-tick\n  \"Run f using requestAnimationFrame or equivalent.\n\n  f will be called just before components are rendered.\"\n  [f]\n  (batch/do-before-flush f))\n\n(defn after-render\n  \"Run f using requestAnimationFrame or equivalent.\n\n  f will be called just after any queued renders in the next animation\n  frame (and even if no renders actually occur).\"\n  [f]\n  (batch/do-after-render f))\n\n(defn partial\n  \"Works just like clojure.core/partial, but the result can be compared with =\"\n  [f & args]\n  (util/make-partial-fn f args))\n\n(defn component-path\n  ;; Try to return the path of component c as a string.\n  ;; Maybe useful for debugging and error reporting, but may break\n  ;; with future versions of React (and return nil).\n  [c]\n  (comp/component-path c))\n"],"mappings":"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","names":["reagent.core/is-client","reagent.impl.util/is-client","reagent.core/react","reagent.impl.util/react","var_args","G__20610","reagent.core/create-element","args-arr__4546__auto__","len__4531__auto__","i__4532__auto__","argseq__4547__auto__","cljs.core/IndexedSeq","seq20606","G__20607","cljs.core/first","cljs.core/next","G__20608","G__20609","self__4518__auto__","type","reagent.core.create_element.cljs$core$IFn$_invoke$arity$2","props","cljs.core/map?","js/Error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","child","children","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","reagent.core/as-element","form","reagent.impl.template/as-element","reagent.core/adapt-react-class","c","reagent.impl.template/adapt-react-class","reagent.core/reactify-component","reagent.impl.component/reactify-component","G__20612","reagent.core/render","comp","container","reagent.dom.render.cljs$core$IFn$_invoke$arity$2","callback","reagent.dom.render.cljs$core$IFn$_invoke$arity$3","reagent.core/unmount-component-at-node","reagent.dom/unmount-component-at-node","reagent.core/as-component","reagent.core/render-component","reagent.core/force-update-all","reagent.ratom/flush!","reagent.dom/force-update-all","reagent.impl.batching/flush-after-render","reagent.core/create-class","spec","reagent.impl.component/create-class","reagent.core/current-component","reagent.impl.component/*current-component*","reagent.core/state-atom","this","reagent.impl.component/reagent-component?","reagent.impl.component/state-atom","reagent.core/state","cljs.core/deref","reagent.core/replace-state","new-state","cljs.core/reset!","reagent.core/set-state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","G__20616","reagent.core/force-update","reagent.core.force_update.cljs$core$IFn$_invoke$arity$2","deep","reagent.impl.util/force-update","reagent.core/props","reagent.impl.component/get-props","reagent.core/children","reagent.impl.component/get-children","reagent.core/argv","reagent.impl.component/get-argv","reagent.core/dom-node","reagent.dom/dom-node","reagent.core/merge-props","defaults","reagent.impl.util/merge-props","reagent.core/flush","reagent.impl.batching/flush","G__20626","reagent.core/atom","seq20624","G__20625","x","reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1","rest","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","reagent.ratom/atom","args__4534__auto__","argseq__4535__auto__","reagent.core/track","seq20628","G__20629","f","args","cljs.core/ifn?","reagent.ratom/make-track","reagent.core/track!","seq20631","G__20632","reagent.ratom/make-track!","reagent.core/dispose!","reagent.ratom/dispose!","reagent.core/wrap","seq20635","G__20636","G__20637","value","reset-fn","reagent.ratom/make-wrapper","reagent.core/cursor","src","path","reagent.ratom/cursor","reagent.core/rswap!","seq20641","G__20642","G__20643","a","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IAtom","a/rswapping","or__3949__auto__","a/rswapfs","p1__20639#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","state","s","temp__5459__auto__","sf","G__20646","reagent.core/next-tick","reagent.impl.batching/do-before-flush","reagent.core/after-render","reagent.impl.batching/do-after-render","reagent.core/partial","seq20648","G__20649","reagent.impl.util/make-partial-fn","reagent.core/component-path","reagent.impl.component/component-path"]}