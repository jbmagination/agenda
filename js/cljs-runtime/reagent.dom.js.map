{"version":3,"sources":["reagent/dom.cljs"],"sourcesContent":["(ns reagent.dom\n  (:require [cljsjs.react.dom]\n            [reagent.impl.util :as util]\n            [reagent.impl.template :as tmpl]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dbg]]\n            [reagent.interop :refer-macros [$ $!]]))\n\n(defonce ^:private imported nil)\n\n(defn module []\n  (cond\n    (some? imported) imported\n    (exists? js/ReactDOM) (set! imported js/ReactDOM)\n    (exists? js/require) (or (set! imported (js/require \"react-dom\"))\n                             (throw (js/Error. \"require('react-dom') failed\")))\n    :else\n    (throw (js/Error. \"js/ReactDOM is missing\"))))\n\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  ($ (module) unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (binding [util/*always-update* true]\n    (->> ($ (module) render (comp) container\n            (fn []\n              (binding [util/*always-update* false]\n                (swap! roots assoc container [comp container])\n                (batch/flush-after-render)\n                (if (some? callback)\n                  (callback))))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container nil))\n  ([comp container callback]\n   (ratom/flush!)\n   (let [f (fn []\n             (tmpl/as-element (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node [container]\n  (unmount-comp container))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  [this]\n  ($ (module) findDOMNode this))\n\n(set! tmpl/find-dom-node dom-node)\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  []\n  (ratom/flush!)\n  (doseq [v (vals @roots)]\n    (apply re-render-component v))\n  \"Updated\")\n"],"mappings":"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","names":["js/reagent","js/reagent.dom","js/reagent.dom.imported","reagent.dom/imported","reagent.dom/module","js/ReactDOM","js/require","or__3949__auto__","js/Error","js/reagent.dom.roots","reagent.dom/roots","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.dom/unmount-comp","container","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","reagent.dom/render-comp","comp","callback","*always-update*20528","reagent.impl.util/*always-update*","*always-update*20529","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","reagent.impl.batching/flush-after-render","reagent.dom/re-render-component","var_args","G__20535","reagent.dom/render","reagent.dom.render.cljs$core$IFn$_invoke$arity$3","reagent.ratom/flush!","f","reagent.impl.template/as-element","cljs.core/fn?","reagent.dom/unmount-component-at-node","reagent.dom/dom-node","this","reagent.impl.template/find-dom-node","reagent.dom/force-update-all","seq__20547","cljs.core/seq","chunk__20548","count__20549","i__20550","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","v","cljs.core/deref","cljs.core/vals","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]}