{"version":3,"sources":["reagent/impl/component.cljs"],"sourcesContent":["(ns reagent.impl.component\n  (:require [reagent.impl.util :as util]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn dev? warn error warn-unless\n                                          assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {} i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (aget o k)) (inc i)))\n        m))))\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [c p]\n  (if-some [a ($ p :argv)]\n    a\n    [(.-constructor c) (shallow-obj-to-map p)]))\n\n(defn get-argv [c]\n  (props-argv c ($ c :props)))\n\n(defn get-props [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-props v)\n      (shallow-obj-to-map p))))\n\n(defn get-children [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-children v)\n      (->> ($ p :children)\n           ($ util/react Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :render)))))\n\n(defn ^boolean reagent-component? [c]\n  (some? ($ c :reagentRender)))\n\n(defn cached-react-class [c]\n  ($ c :cljsReactClass))\n\n(defn cache-react-class [c constructor]\n  ($! c :cljsReactClass constructor))\n\n\n;;; State\n\n(defn state-atom [this]\n  (let [sa ($ this :cljsState)]\n    (if-not (nil? sa)\n      sa\n      ($! this :cljsState (ratom/atom nil)))))\n\n;; avoid circular dependency: this gets set from template.cljs\n(defonce as-element nil)\n\n\n;;; Rendering\n\n(defn wrap-render [c]\n  (let [f ($ c :reagentRender)\n        _ (assert-callable f)\n        res (if (true? ($ c :cljsLegacyRender))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (as-element res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (as-element (apply vector res args)))\n                           res)]\n                   ($! c :reagentRender f)\n                   (recur c))\n      :else res)))\n\n(declare comp-name)\n\n(defn do-render [c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(def static-fns\n  {:render\n   (fn render []\n     (this-as c (if util/*non-reactive*\n                  (do-render c)\n                  (let [rat ($ c :cljsRatom)]\n                    (batch/mark-rendered c)\n                    (if (nil? rat)\n                      (ratom/run-in-reaction #(do-render c) c \"cljsRatom\"\n                                             batch/queue-render rat-opts)\n                      (._run rat false))))))})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getInitialState\n    (fn getInitialState []\n      (this-as c (reset! (state-atom c) (.call f c c))))\n\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv ($ c :props.argv)\n                         new-argv ($ nextprops :argv)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (not= old-argv new-argv))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops]\n      (this-as c (.call f c c (props-argv c oldprops))))\n\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c\n               ($! c :cljsMountOrder (batch/next-mount-count))\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> ($ c :cljsRatom)\n                       ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    nil))\n\n(defn get-wrapper [key f name]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillMount nil\n                 :componentWillUnmount nil})\n\n(def dash-to-camel (util/memoize-1 util/dash-to-camel))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-camel keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender :componentFunction])\n          render-fun (-> renders vals first)]\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:componentFunction fmap))\n        legacy-render (nil? render-fun)\n        render-fun (or render-fun\n                       (:render fmap))\n        name (str (or (:displayName fmap)\n                      (util/fun-name render-fun)))\n        name (case name\n               \"\" (str (gensym \"reagent\"))\n               name)\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v name)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :autobind false\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (:render static-fns))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (aset (name k) v)))\n             #js{} m))\n\n(defn cljsify [body]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      wrap-funs\n      map-to-js))\n\n(defn create-class [body]\n  {:pre [(map? body)]}\n  (->> body\n       cljsify\n       util/create-class))\n\n(defn component-path [c]\n  (let [elem (some-> (or (some-> c ($ :_reactInternalInstance))\n                          c)\n                     ($ :_currentElement))\n        name (some-> elem\n                     ($ :type)\n                     ($ :displayName))\n        path (some-> elem\n                     ($ :_owner)\n                     component-path\n                     (str \" > \"))\n        res (str path name)]\n    (when-not (empty? res) res)))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (or (component-path c)\n                (some-> c .-constructor util/fun-name))]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn fn-to-class [f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (let [n (util/fun-name f)]\n                                               (if (empty? n) f n))\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender)]\n      (cache-react-class f res))))\n\n(defn as-class [tag]\n  (if-some [cached-class (cached-react-class tag)]\n    cached-class\n    (fn-to-class tag)))\n\n(defn reactify-component [comp]\n  (if (react-class? comp)\n    comp\n    (as-class comp)))\n"],"mappings":"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","names":["reagent.impl.component/shallow-obj-to-map","o","ks","cljs.core/js-keys","len","m","i","k","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","reagent.impl.component/extract-props","v","p","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/map?","reagent.impl.component/extract-children","first-child","cljs.core/count","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","reagent.impl.component/props-argv","c","temp__5459__auto__","a","reagent.impl.component/get-argv","reagent.impl.component/get-props","reagent.impl.component/get-children","reagent.impl.util/react","cljs.core.into.cljs$core$IFn$_invoke$arity$2","reagent.impl.component/reagent-class?","cljs.core/fn?","G__20334","reagent.impl.component/react-class?","G__20338","reagent.impl.component/reagent-component?","reagent.impl.component/cached-react-class","reagent.impl.component/cache-react-class","constructor","reagent.impl.component/state-atom","this","sa","reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1","js/reagent","js/reagent.impl","js/reagent.impl.component","js/reagent.impl.component.as-element","reagent.impl.component/as-element","reagent.impl.component/wrap-render","f","_","cljs.core/ifn?","js/Error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","res","n","G__20350","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core/vector?","args","G__20352","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","reagent.impl.component/do-render","*current-component*20357","reagent.impl.component/*current-component*","ok","reagent/debug.has-console","reagent/debug.tracking","reagent/debug.track-console","js/console","reagent.impl.component/comp-name","reagent.impl.component/rat-opts","reagent.impl.component/static-fns","reagent.impl.util/*non-reactive*","rat","reagent.impl.batching/mark-rendered","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/custom-wrapper","key","G__20361","cljs.core/Keyword","cljs.core/reset!","nextprops","nextstate","or__3949__auto__","reagent.impl.util/*always-update*","old-argv","new-argv","noargv","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","oldprops","reagent.impl.batching/next-mount-count","G__20366","reagent.ratom/dispose!","reagent.impl.component/get-wrapper","name","wrap","and__3938__auto__","reagent.impl.component/obligatory","reagent.impl.component/dash-to-camel","reagent.impl.util/memoize-1","reagent.impl.util/dash-to-camel","reagent.impl.component/camelify-map-keys","fun-map","cljs.core/reduce-kv","reagent.impl.component/add-obligatory","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/wrap-funs","fmap","renders","cljs.core/select-keys","render-fun","cljs.core/vals","cljs.core/first","legacy-render","reagent.impl.util/fun-name","G__20367","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/map-to-js","G__20368","cljs.core/name","reagent.impl.component/cljsify","body","reagent.impl.component/create-class","G__20369","reagent.impl.util/create-class","reagent.impl.component/component-path","elem","G__20370","G__20372","G__20373","path","G__20374","cljs.core/empty?","G__20375","reagent.impl.component/fn-to-class","spec","cljs.core/meta","withrender","reagent.impl.component/as-class","tag","cached-class","reagent.impl.component/reactify-component","comp"]}